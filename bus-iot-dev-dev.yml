{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "The AWS CloudFormation template for this Serverless application",
    "Resources": {
        "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
                "BucketEncryption": {
                    "ServerSideEncryptionConfiguration": [
                        {
                            "ServerSideEncryptionByDefault": {
                                "SSEAlgorithm": "AES256"
                            }
                        }
                    ]
                }
            }
        },
        "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
                "Bucket": {
                    "Ref": "ServerlessDeploymentBucket"
                },
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Action": "s3:*",
                            "Effect": "Deny",
                            "Principal": "*",
                            "Resource": [
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "arn:",
                                            {
                                                "Ref": "AWS::Partition"
                                            },
                                            ":s3:::",
                                            {
                                                "Ref": "ServerlessDeploymentBucket"
                                            },
                                            "/*"
                                        ]
                                    ]
                                }
                            ],
                            "Condition": {
                                "Bool": {
                                    "aws:SecureTransport": false
                                }
                            }
                        }
                    ]
                }
            }
        },
        "DetermineRouteLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
                "LogGroupName": "/aws/lambda/bus-iot-dev-dev-determineRoute"
            }
        },
        "AdminLoginLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
                "LogGroupName": "/aws/lambda/bus-iot-dev-dev-AdminLogin"
            }
        },
        "AdminSignUpLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
                "LogGroupName": "/aws/lambda/bus-iot-dev-dev-AdminSignUp"
            }
        },
        "GetDeviceLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
                "LogGroupName": "/aws/lambda/bus-iot-dev-dev-GetDevice"
            }
        },
        "AddDeviceLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
                "LogGroupName": "/aws/lambda/bus-iot-dev-dev-AddDevice"
            }
        },
        "UpdateDeviceLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
                "LogGroupName": "/aws/lambda/bus-iot-dev-dev-UpdateDevice"
            }
        },
        "UserStaticDetailsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
                "LogGroupName": "/aws/lambda/bus-iot-dev-dev-UserStaticDetails"
            }
        },
        "GetAllStaticDetailsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
                "LogGroupName": "/aws/lambda/bus-iot-dev-dev-GetAllStaticDetails"
            }
        },
        "GetAllStaticDetailsByUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
                "LogGroupName": "/aws/lambda/bus-iot-dev-dev-GetAllStaticDetailsByUser"
            }
        },
        "UpdateStaticDetailsByUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
                "LogGroupName": "/aws/lambda/bus-iot-dev-dev-UpdateStaticDetailsByUser"
            }
        },
        "GetContactLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
                "LogGroupName": "/aws/lambda/bus-iot-dev-dev-GetContact"
            }
        },
        "AddContactLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
                "LogGroupName": "/aws/lambda/bus-iot-dev-dev-AddContact"
            }
        },
        "UpdateContactLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
                "LogGroupName": "/aws/lambda/bus-iot-dev-dev-UpdateContact"
            }
        },
        "GetNotifications1LogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
                "LogGroupName": "/aws/lambda/bus-iot-dev-dev-GetNotifications1"
            }
        },
        "GetNotificationsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
                "LogGroupName": "/aws/lambda/bus-iot-dev-dev-GetNotifications"
            }
        },
        "AddNotificationsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
                "LogGroupName": "/aws/lambda/bus-iot-dev-dev-AddNotifications"
            }
        },
        "UpdateNotificationsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
                "LogGroupName": "/aws/lambda/bus-iot-dev-dev-UpdateNotifications"
            }
        },
        "GetMessageBoard1LogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
                "LogGroupName": "/aws/lambda/bus-iot-dev-dev-GetMessageBoard1"
            }
        },
        "GetMessageBoardLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
                "LogGroupName": "/aws/lambda/bus-iot-dev-dev-GetMessageBoard"
            }
        },
        "AddMessageBoardLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
                "LogGroupName": "/aws/lambda/bus-iot-dev-dev-AddMessageBoard"
            }
        },
        "UpdateMessageBoardLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
                "LogGroupName": "/aws/lambda/bus-iot-dev-dev-UpdateMessageBoard"
            }
        },
        "GetGtNews1LogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
                "LogGroupName": "/aws/lambda/bus-iot-dev-dev-GetGtNews1"
            }
        },
        "GetGtNewsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
                "LogGroupName": "/aws/lambda/bus-iot-dev-dev-GetGtNews"
            }
        },
        "AddGtNewsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
                "LogGroupName": "/aws/lambda/bus-iot-dev-dev-AddGtNews"
            }
        },
        "UpdateGtNewsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
                "LogGroupName": "/aws/lambda/bus-iot-dev-dev-UpdateGtNews"
            }
        },
        "AvailableRoutesLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
                "LogGroupName": "/aws/lambda/bus-iot-dev-dev-AvailableRoutes"
            }
        },
        "AppropriateBusListLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
                "LogGroupName": "/aws/lambda/bus-iot-dev-dev-AppropriateBusList"
            }
        },
        "GetSelectedBusLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
                "LogGroupName": "/aws/lambda/bus-iot-dev-dev-GetSelectedBus"
            }
        },
        "GetAllBusesLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
                "LogGroupName": "/aws/lambda/bus-iot-dev-dev-GetAllBuses"
            }
        },
        "GetDriverRatingsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
                "LogGroupName": "/aws/lambda/bus-iot-dev-dev-GetDriverRatings"
            }
        },
        "AvailableBusesLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
                "LogGroupName": "/aws/lambda/bus-iot-dev-dev-AvailableBuses"
            }
        },
        "GetBusTrackingDetailsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
                "LogGroupName": "/aws/lambda/bus-iot-dev-dev-GetBusTrackingDetails"
            }
        },
        "BusTrackingDetailLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
                "LogGroupName": "/aws/lambda/bus-iot-dev-dev-BusTrackingDetail"
            }
        },
        "GetBusLocationTraceGeoTabLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
                "LogGroupName": "/aws/lambda/bus-iot-dev-dev-GetBusLocationTraceGeoTab"
            }
        },
        "GetBusExceptionsGeoTabLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
                "LogGroupName": "/aws/lambda/bus-iot-dev-dev-GetBusExceptionsGeoTab"
            }
        },
        "GetbusTrackingDetailGeoTabLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
                "LogGroupName": "/aws/lambda/bus-iot-dev-dev-GetbusTrackingDetailGeoTab"
            }
        },
        "PiLabTripDataProcessAllAPILogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
                "LogGroupName": "/aws/lambda/bus-iot-dev-dev-PiLabTripDataProcessAllAPI"
            }
        },
        "PiLabTripDataProcessAPILogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
                "LogGroupName": "/aws/lambda/bus-iot-dev-dev-PiLabTripDataProcessAPI"
            }
        },
        "PiLabTripDataProcessAllLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
                "LogGroupName": "/aws/lambda/bus-iot-dev-dev-PiLabTripDataProcessAll"
            }
        },
        "TestUnderscoreGeoTabTripDataLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
                "LogGroupName": "/aws/lambda/bus-iot-dev-dev-Test_GeoTabTripData"
            }
        },
        "TestUnderscoreSNSUnderscoreDynamoDbLambdaLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
                "LogGroupName": "/aws/lambda/bus-iot-dev-dev-Test_SNS_DynamoDbLambda"
            }
        },
        "TestUnderscorePiLabTripDataProcessAllLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
                "LogGroupName": "/aws/lambda/bus-iot-dev-dev-Test_PiLabTripDataProcessAll"
            }
        },
        "TestUnderscorePiLabTripDataProcessLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
                "LogGroupName": "/aws/lambda/bus-iot-dev-dev-Test_PiLabTripDataProcess"
            }
        },
        "TestUnderscorePiLabTripGeofencingExceptionLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
                "LogGroupName": "/aws/lambda/bus-iot-dev-dev-Test_PiLabTripGeofencingException"
            }
        },
        "TestUnderscorePiLabTripExceptionEventLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
                "LogGroupName": "/aws/lambda/bus-iot-dev-dev-Test_PiLabTripExceptionEvent"
            }
        },
        "SnsFirehoseLambdaTriggeredLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
                "LogGroupName": "/aws/lambda/bus-iot-dev-dev-SnsFirehoseLambdaTriggered"
            }
        },
        "SnsDynamoDbLambdaTriggeredLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
                "LogGroupName": "/aws/lambda/bus-iot-dev-dev-SnsDynamoDbLambdaTriggered"
            }
        },
        "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Policies": [
                    {
                        "PolicyName": {
                            "Fn::Join": [
                                "-",
                                [
                                    "bus-iot-dev-dev",
                                    "lambda"
                                ]
                            ]
                        },
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "logs:CreateLogStream",
                                        "logs:CreateLogGroup"
                                    ],
                                    "Resource": [
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/bus-iot-dev-dev*:*"
                                        }
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "logs:PutLogEvents"
                                    ],
                                    "Resource": [
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/bus-iot-dev-dev*:*:*"
                                        }
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "s3:GetObject"
                                    ],
                                    "Resource": "arn:aws:s3:::pilabs-at-473913856290/*"
                                }
                            ]
                        }
                    }
                ],
                "Path": "/",
                "RoleName": {
                    "Fn::Join": [
                        "-",
                        [
                            "bus-iot-dev-dev",
                            {
                                "Ref": "AWS::Region"
                            },
                            "lambdaRole"
                        ]
                    ]
                }
            }
        },
        "DetermineRouteLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Ref": "ServerlessDeploymentBucket"
                    },
                    "S3Key": "serverless/bus-iot-dev/dev/1659083790887-2022-07-29T08:36:30.887Z/bus-iot-dev.zip"
                },
                "FunctionName": "bus-iot-dev-dev-determineRoute",
                "Handler": "controllers/routesController.determineRoute",
                "MemorySize": 320,
                "Role": {
                    "Fn::GetAtt": [
                        "IamRoleLambdaExecution",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs12.x",
                "Timeout": 900,
                "Environment": {
                    "Variables": {
                        "NODE_ENV": "dev"
                    }
                }
            },
            "DependsOn": [
                "DetermineRouteLogGroup",
                "IamRoleLambdaExecution"
            ]
        },
        "DetermineRouteLambdaVersion59gJcg6ewnU4m6PFhczPDhtDdl3E6krmAVFh32LeoFA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
                "FunctionName": {
                    "Ref": "DetermineRouteLambdaFunction"
                },
                "CodeSha256": "lC8j77nk+9jh3tjThy4J99WP0SGfmBKQKJx2O7s9KZQ="
            }
        },
        "AdminLoginLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Ref": "ServerlessDeploymentBucket"
                    },
                    "S3Key": "serverless/bus-iot-dev/dev/1659083790887-2022-07-29T08:36:30.887Z/bus-iot-dev.zip"
                },
                "FunctionName": "bus-iot-dev-dev-AdminLogin",
                "Handler": "controllers/authController.Login",
                "MemorySize": 320,
                "Role": {
                    "Fn::GetAtt": [
                        "IamRoleLambdaExecution",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs12.x",
                "Timeout": 900
            },
            "DependsOn": [
                "AdminLoginLogGroup",
                "IamRoleLambdaExecution"
            ]
        },
        "AdminLoginLambdaVersionPNYrUOSulyAhsclfSpIFEtIkKyT5YYNG7wYX7IBAZ0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
                "FunctionName": {
                    "Ref": "AdminLoginLambdaFunction"
                },
                "CodeSha256": "lC8j77nk+9jh3tjThy4J99WP0SGfmBKQKJx2O7s9KZQ="
            }
        },
        "AdminSignUpLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Ref": "ServerlessDeploymentBucket"
                    },
                    "S3Key": "serverless/bus-iot-dev/dev/1659083790887-2022-07-29T08:36:30.887Z/bus-iot-dev.zip"
                },
                "FunctionName": "bus-iot-dev-dev-AdminSignUp",
                "Handler": "controllers/authController.SignUp",
                "MemorySize": 320,
                "Role": {
                    "Fn::GetAtt": [
                        "IamRoleLambdaExecution",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs12.x",
                "Timeout": 900
            },
            "DependsOn": [
                "AdminSignUpLogGroup",
                "IamRoleLambdaExecution"
            ]
        },
        "AdminSignUpLambdaVersion1wMNrpyPta5FBkg5YtoOnCEIJz4l3pjmLkqEUNboyw": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
                "FunctionName": {
                    "Ref": "AdminSignUpLambdaFunction"
                },
                "CodeSha256": "lC8j77nk+9jh3tjThy4J99WP0SGfmBKQKJx2O7s9KZQ="
            }
        },
        "GetDeviceLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Ref": "ServerlessDeploymentBucket"
                    },
                    "S3Key": "serverless/bus-iot-dev/dev/1659083790887-2022-07-29T08:36:30.887Z/bus-iot-dev.zip"
                },
                "FunctionName": "bus-iot-dev-dev-GetDevice",
                "Handler": "controllers/deviceController.GetDevice",
                "MemorySize": 320,
                "Role": {
                    "Fn::GetAtt": [
                        "IamRoleLambdaExecution",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs12.x",
                "Timeout": 900
            },
            "DependsOn": [
                "GetDeviceLogGroup",
                "IamRoleLambdaExecution"
            ]
        },
        "GetDeviceLambdaVersionYCEVb7ZXKfy6L38kLXABN3eYlDyaiklsfLavRIGgj0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
                "FunctionName": {
                    "Ref": "GetDeviceLambdaFunction"
                },
                "CodeSha256": "lC8j77nk+9jh3tjThy4J99WP0SGfmBKQKJx2O7s9KZQ="
            }
        },
        "AddDeviceLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Ref": "ServerlessDeploymentBucket"
                    },
                    "S3Key": "serverless/bus-iot-dev/dev/1659083790887-2022-07-29T08:36:30.887Z/bus-iot-dev.zip"
                },
                "FunctionName": "bus-iot-dev-dev-AddDevice",
                "Handler": "controllers/deviceController.AddDevice",
                "MemorySize": 320,
                "Role": {
                    "Fn::GetAtt": [
                        "IamRoleLambdaExecution",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs12.x",
                "Timeout": 900
            },
            "DependsOn": [
                "AddDeviceLogGroup",
                "IamRoleLambdaExecution"
            ]
        },
        "AddDeviceLambdaVersionEeTEp9XZzEm0XJIwu0OiVkcMihI7FrhOZA71RL4qyo": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
                "FunctionName": {
                    "Ref": "AddDeviceLambdaFunction"
                },
                "CodeSha256": "lC8j77nk+9jh3tjThy4J99WP0SGfmBKQKJx2O7s9KZQ="
            }
        },
        "UpdateDeviceLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Ref": "ServerlessDeploymentBucket"
                    },
                    "S3Key": "serverless/bus-iot-dev/dev/1659083790887-2022-07-29T08:36:30.887Z/bus-iot-dev.zip"
                },
                "FunctionName": "bus-iot-dev-dev-UpdateDevice",
                "Handler": "controllers/deviceController.UpdateDevice",
                "MemorySize": 320,
                "Role": {
                    "Fn::GetAtt": [
                        "IamRoleLambdaExecution",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs12.x",
                "Timeout": 900
            },
            "DependsOn": [
                "UpdateDeviceLogGroup",
                "IamRoleLambdaExecution"
            ]
        },
        "UpdateDeviceLambdaVersionjOaTbjMZDFFTbXISbgKP72nPf9x1o5fNY1jSeghtFsA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
                "FunctionName": {
                    "Ref": "UpdateDeviceLambdaFunction"
                },
                "CodeSha256": "lC8j77nk+9jh3tjThy4J99WP0SGfmBKQKJx2O7s9KZQ="
            }
        },
        "UserStaticDetailsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Ref": "ServerlessDeploymentBucket"
                    },
                    "S3Key": "serverless/bus-iot-dev/dev/1659083790887-2022-07-29T08:36:30.887Z/bus-iot-dev.zip"
                },
                "FunctionName": "bus-iot-dev-dev-UserStaticDetails",
                "Handler": "controllers/userController.UserStaticDetails",
                "MemorySize": 320,
                "Role": {
                    "Fn::GetAtt": [
                        "IamRoleLambdaExecution",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs12.x",
                "Timeout": 900
            },
            "DependsOn": [
                "UserStaticDetailsLogGroup",
                "IamRoleLambdaExecution"
            ]
        },
        "UserStaticDetailsLambdaVersionBwg8Iakipgov83XsKbF9iE0xv6NAJ8fpG1as7Y6UAFY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
                "FunctionName": {
                    "Ref": "UserStaticDetailsLambdaFunction"
                },
                "CodeSha256": "lC8j77nk+9jh3tjThy4J99WP0SGfmBKQKJx2O7s9KZQ="
            }
        },
        "GetAllStaticDetailsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Ref": "ServerlessDeploymentBucket"
                    },
                    "S3Key": "serverless/bus-iot-dev/dev/1659083790887-2022-07-29T08:36:30.887Z/bus-iot-dev.zip"
                },
                "FunctionName": "bus-iot-dev-dev-GetAllStaticDetails",
                "Handler": "controllers/userController.AllStaticDetails",
                "MemorySize": 320,
                "Role": {
                    "Fn::GetAtt": [
                        "IamRoleLambdaExecution",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs12.x",
                "Timeout": 900
            },
            "DependsOn": [
                "GetAllStaticDetailsLogGroup",
                "IamRoleLambdaExecution"
            ]
        },
        "GetAllStaticDetailsLambdaVersionnoPU2FY9c16JL1ewVNe39RzmaSTFizZtYFxfq0am7g": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
                "FunctionName": {
                    "Ref": "GetAllStaticDetailsLambdaFunction"
                },
                "CodeSha256": "lC8j77nk+9jh3tjThy4J99WP0SGfmBKQKJx2O7s9KZQ="
            }
        },
        "GetAllStaticDetailsByUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Ref": "ServerlessDeploymentBucket"
                    },
                    "S3Key": "serverless/bus-iot-dev/dev/1659083790887-2022-07-29T08:36:30.887Z/bus-iot-dev.zip"
                },
                "FunctionName": "bus-iot-dev-dev-GetAllStaticDetailsByUser",
                "Handler": "controllers/userController.AllStaticDetailsByUser",
                "MemorySize": 320,
                "Role": {
                    "Fn::GetAtt": [
                        "IamRoleLambdaExecution",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs12.x",
                "Timeout": 900
            },
            "DependsOn": [
                "GetAllStaticDetailsByUserLogGroup",
                "IamRoleLambdaExecution"
            ]
        },
        "GetAllStaticDetailsByUserLambdaVersionlJ6WteYyierUMGfHDCuz2pDmoWxtn04zHpvy7sORfhc": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
                "FunctionName": {
                    "Ref": "GetAllStaticDetailsByUserLambdaFunction"
                },
                "CodeSha256": "lC8j77nk+9jh3tjThy4J99WP0SGfmBKQKJx2O7s9KZQ="
            }
        },
        "UpdateStaticDetailsByUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Ref": "ServerlessDeploymentBucket"
                    },
                    "S3Key": "serverless/bus-iot-dev/dev/1659083790887-2022-07-29T08:36:30.887Z/bus-iot-dev.zip"
                },
                "FunctionName": "bus-iot-dev-dev-UpdateStaticDetailsByUser",
                "Handler": "controllers/userController.UpdateStaticDetailsByUser",
                "MemorySize": 320,
                "Role": {
                    "Fn::GetAtt": [
                        "IamRoleLambdaExecution",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs12.x",
                "Timeout": 900
            },
            "DependsOn": [
                "UpdateStaticDetailsByUserLogGroup",
                "IamRoleLambdaExecution"
            ]
        },
        "UpdateStaticDetailsByUserLambdaVersionlutzsojxbe3NPNarpsDyE1n1cevxGiCM2mVJHflzTEk": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
                "FunctionName": {
                    "Ref": "UpdateStaticDetailsByUserLambdaFunction"
                },
                "CodeSha256": "lC8j77nk+9jh3tjThy4J99WP0SGfmBKQKJx2O7s9KZQ="
            }
        },
        "GetContactLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Ref": "ServerlessDeploymentBucket"
                    },
                    "S3Key": "serverless/bus-iot-dev/dev/1659083790887-2022-07-29T08:36:30.887Z/bus-iot-dev.zip"
                },
                "FunctionName": "bus-iot-dev-dev-GetContact",
                "Handler": "controllers/contactController.GetContact",
                "MemorySize": 320,
                "Role": {
                    "Fn::GetAtt": [
                        "IamRoleLambdaExecution",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs12.x",
                "Timeout": 900
            },
            "DependsOn": [
                "GetContactLogGroup",
                "IamRoleLambdaExecution"
            ]
        },
        "GetContactLambdaVersionlkqNQ8rPfKSN4Zclnr9nKv1P7tCUgd8ClAyrcelC5U": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
                "FunctionName": {
                    "Ref": "GetContactLambdaFunction"
                },
                "CodeSha256": "lC8j77nk+9jh3tjThy4J99WP0SGfmBKQKJx2O7s9KZQ="
            }
        },
        "AddContactLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Ref": "ServerlessDeploymentBucket"
                    },
                    "S3Key": "serverless/bus-iot-dev/dev/1659083790887-2022-07-29T08:36:30.887Z/bus-iot-dev.zip"
                },
                "FunctionName": "bus-iot-dev-dev-AddContact",
                "Handler": "controllers/contactController.AddContact",
                "MemorySize": 320,
                "Role": {
                    "Fn::GetAtt": [
                        "IamRoleLambdaExecution",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs12.x",
                "Timeout": 900
            },
            "DependsOn": [
                "AddContactLogGroup",
                "IamRoleLambdaExecution"
            ]
        },
        "AddContactLambdaVersionnFFtKuqGzQrlJcD37hBnsDFWaOJ9oYZITR6zzLoRyNg": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
                "FunctionName": {
                    "Ref": "AddContactLambdaFunction"
                },
                "CodeSha256": "lC8j77nk+9jh3tjThy4J99WP0SGfmBKQKJx2O7s9KZQ="
            }
        },
        "UpdateContactLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Ref": "ServerlessDeploymentBucket"
                    },
                    "S3Key": "serverless/bus-iot-dev/dev/1659083790887-2022-07-29T08:36:30.887Z/bus-iot-dev.zip"
                },
                "FunctionName": "bus-iot-dev-dev-UpdateContact",
                "Handler": "controllers/contactController.UpdateContact",
                "MemorySize": 320,
                "Role": {
                    "Fn::GetAtt": [
                        "IamRoleLambdaExecution",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs12.x",
                "Timeout": 900
            },
            "DependsOn": [
                "UpdateContactLogGroup",
                "IamRoleLambdaExecution"
            ]
        },
        "UpdateContactLambdaVersionpUBmhL1BjgTsSjbZmKwJkcOpuZMiiLi1YoMyPV4npQ": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
                "FunctionName": {
                    "Ref": "UpdateContactLambdaFunction"
                },
                "CodeSha256": "lC8j77nk+9jh3tjThy4J99WP0SGfmBKQKJx2O7s9KZQ="
            }
        },
        "GetNotifications1LambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Ref": "ServerlessDeploymentBucket"
                    },
                    "S3Key": "serverless/bus-iot-dev/dev/1659083790887-2022-07-29T08:36:30.887Z/bus-iot-dev.zip"
                },
                "FunctionName": "bus-iot-dev-dev-GetNotifications1",
                "Handler": "controllers/notificationController.GetNotifications",
                "MemorySize": 320,
                "Role": {
                    "Fn::GetAtt": [
                        "IamRoleLambdaExecution",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs12.x",
                "Timeout": 900
            },
            "DependsOn": [
                "GetNotifications1LogGroup",
                "IamRoleLambdaExecution"
            ]
        },
        "GetNotifications1LambdaVersionrAOrXTfaRAEqvdDuYjPDdhGdvazPYu4bFf6Cx0C5Xuk": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
                "FunctionName": {
                    "Ref": "GetNotifications1LambdaFunction"
                },
                "CodeSha256": "lC8j77nk+9jh3tjThy4J99WP0SGfmBKQKJx2O7s9KZQ="
            }
        },
        "GetNotificationsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Ref": "ServerlessDeploymentBucket"
                    },
                    "S3Key": "serverless/bus-iot-dev/dev/1659083790887-2022-07-29T08:36:30.887Z/bus-iot-dev.zip"
                },
                "FunctionName": "bus-iot-dev-dev-GetNotifications",
                "Handler": "controllers/notificationController.GetNotifications",
                "MemorySize": 320,
                "Role": {
                    "Fn::GetAtt": [
                        "IamRoleLambdaExecution",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs12.x",
                "Timeout": 900
            },
            "DependsOn": [
                "GetNotificationsLogGroup",
                "IamRoleLambdaExecution"
            ]
        },
        "GetNotificationsLambdaVersion8teZXk0XGYtIrnp4957TtHjxXYM2tsMf34fTLtZe1E": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
                "FunctionName": {
                    "Ref": "GetNotificationsLambdaFunction"
                },
                "CodeSha256": "lC8j77nk+9jh3tjThy4J99WP0SGfmBKQKJx2O7s9KZQ="
            }
        },
        "AddNotificationsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Ref": "ServerlessDeploymentBucket"
                    },
                    "S3Key": "serverless/bus-iot-dev/dev/1659083790887-2022-07-29T08:36:30.887Z/bus-iot-dev.zip"
                },
                "FunctionName": "bus-iot-dev-dev-AddNotifications",
                "Handler": "controllers/notificationController.AddNotifications",
                "MemorySize": 320,
                "Role": {
                    "Fn::GetAtt": [
                        "IamRoleLambdaExecution",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs12.x",
                "Timeout": 900
            },
            "DependsOn": [
                "AddNotificationsLogGroup",
                "IamRoleLambdaExecution"
            ]
        },
        "AddNotificationsLambdaVersionrIshOfBx8qmINp3ivndEprRTp8L9VCwXlpSAoDSYNOI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
                "FunctionName": {
                    "Ref": "AddNotificationsLambdaFunction"
                },
                "CodeSha256": "lC8j77nk+9jh3tjThy4J99WP0SGfmBKQKJx2O7s9KZQ="
            }
        },
        "UpdateNotificationsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Ref": "ServerlessDeploymentBucket"
                    },
                    "S3Key": "serverless/bus-iot-dev/dev/1659083790887-2022-07-29T08:36:30.887Z/bus-iot-dev.zip"
                },
                "FunctionName": "bus-iot-dev-dev-UpdateNotifications",
                "Handler": "controllers/notificationController.UpdateNotifications",
                "MemorySize": 320,
                "Role": {
                    "Fn::GetAtt": [
                        "IamRoleLambdaExecution",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs12.x",
                "Timeout": 900
            },
            "DependsOn": [
                "UpdateNotificationsLogGroup",
                "IamRoleLambdaExecution"
            ]
        },
        "UpdateNotificationsLambdaVersionDc4WJFZAXQNQZobp8Yi2m4Iy1Qo12HD139QSemKDuvQ": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
                "FunctionName": {
                    "Ref": "UpdateNotificationsLambdaFunction"
                },
                "CodeSha256": "lC8j77nk+9jh3tjThy4J99WP0SGfmBKQKJx2O7s9KZQ="
            }
        },
        "GetMessageBoard1LambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Ref": "ServerlessDeploymentBucket"
                    },
                    "S3Key": "serverless/bus-iot-dev/dev/1659083790887-2022-07-29T08:36:30.887Z/bus-iot-dev.zip"
                },
                "FunctionName": "bus-iot-dev-dev-GetMessageBoard1",
                "Handler": "controllers/notificationController.GetMessageBoard",
                "MemorySize": 320,
                "Role": {
                    "Fn::GetAtt": [
                        "IamRoleLambdaExecution",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs12.x",
                "Timeout": 900
            },
            "DependsOn": [
                "GetMessageBoard1LogGroup",
                "IamRoleLambdaExecution"
            ]
        },
        "GetMessageBoard1LambdaVersion5395PXQbHzO3doxS9Q3ZTuY4sVZxAs5nl785RNjc": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
                "FunctionName": {
                    "Ref": "GetMessageBoard1LambdaFunction"
                },
                "CodeSha256": "lC8j77nk+9jh3tjThy4J99WP0SGfmBKQKJx2O7s9KZQ="
            }
        },
        "GetMessageBoardLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Ref": "ServerlessDeploymentBucket"
                    },
                    "S3Key": "serverless/bus-iot-dev/dev/1659083790887-2022-07-29T08:36:30.887Z/bus-iot-dev.zip"
                },
                "FunctionName": "bus-iot-dev-dev-GetMessageBoard",
                "Handler": "controllers/notificationController.GetMessageBoard",
                "MemorySize": 320,
                "Role": {
                    "Fn::GetAtt": [
                        "IamRoleLambdaExecution",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs12.x",
                "Timeout": 900
            },
            "DependsOn": [
                "GetMessageBoardLogGroup",
                "IamRoleLambdaExecution"
            ]
        },
        "GetMessageBoardLambdaVersionSw8rQa7dPnbRCqEXyVL9jUdmrh1gVx6tZZtOYXeXvQ": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
                "FunctionName": {
                    "Ref": "GetMessageBoardLambdaFunction"
                },
                "CodeSha256": "lC8j77nk+9jh3tjThy4J99WP0SGfmBKQKJx2O7s9KZQ="
            }
        },
        "AddMessageBoardLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Ref": "ServerlessDeploymentBucket"
                    },
                    "S3Key": "serverless/bus-iot-dev/dev/1659083790887-2022-07-29T08:36:30.887Z/bus-iot-dev.zip"
                },
                "FunctionName": "bus-iot-dev-dev-AddMessageBoard",
                "Handler": "controllers/notificationController.AddMessageBoard",
                "MemorySize": 320,
                "Role": {
                    "Fn::GetAtt": [
                        "IamRoleLambdaExecution",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs12.x",
                "Timeout": 900
            },
            "DependsOn": [
                "AddMessageBoardLogGroup",
                "IamRoleLambdaExecution"
            ]
        },
        "AddMessageBoardLambdaVersion0yh8K6Hz8cFYAL2eLf50Q3ATgMIAjex1DYpliQ": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
                "FunctionName": {
                    "Ref": "AddMessageBoardLambdaFunction"
                },
                "CodeSha256": "lC8j77nk+9jh3tjThy4J99WP0SGfmBKQKJx2O7s9KZQ="
            }
        },
        "UpdateMessageBoardLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Ref": "ServerlessDeploymentBucket"
                    },
                    "S3Key": "serverless/bus-iot-dev/dev/1659083790887-2022-07-29T08:36:30.887Z/bus-iot-dev.zip"
                },
                "FunctionName": "bus-iot-dev-dev-UpdateMessageBoard",
                "Handler": "controllers/notificationController.UpdateMessageBoard",
                "MemorySize": 320,
                "Role": {
                    "Fn::GetAtt": [
                        "IamRoleLambdaExecution",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs12.x",
                "Timeout": 900
            },
            "DependsOn": [
                "UpdateMessageBoardLogGroup",
                "IamRoleLambdaExecution"
            ]
        },
        "UpdateMessageBoardLambdaVersionezphgQOVBtZjiobJ5ahtfbmuv3B8BT3TgJvikqEI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
                "FunctionName": {
                    "Ref": "UpdateMessageBoardLambdaFunction"
                },
                "CodeSha256": "lC8j77nk+9jh3tjThy4J99WP0SGfmBKQKJx2O7s9KZQ="
            }
        },
        "GetGtNews1LambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Ref": "ServerlessDeploymentBucket"
                    },
                    "S3Key": "serverless/bus-iot-dev/dev/1659083790887-2022-07-29T08:36:30.887Z/bus-iot-dev.zip"
                },
                "FunctionName": "bus-iot-dev-dev-GetGtNews1",
                "Handler": "controllers/notificationController.GetGtNews",
                "MemorySize": 320,
                "Role": {
                    "Fn::GetAtt": [
                        "IamRoleLambdaExecution",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs12.x",
                "Timeout": 900
            },
            "DependsOn": [
                "GetGtNews1LogGroup",
                "IamRoleLambdaExecution"
            ]
        },
        "GetGtNews1LambdaVersionS9SFSUX3DJJ2cgL1ShKbz3s5MJJBzlD7z2sLlRUCVrM": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
                "FunctionName": {
                    "Ref": "GetGtNews1LambdaFunction"
                },
                "CodeSha256": "lC8j77nk+9jh3tjThy4J99WP0SGfmBKQKJx2O7s9KZQ="
            }
        },
        "GetGtNewsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Ref": "ServerlessDeploymentBucket"
                    },
                    "S3Key": "serverless/bus-iot-dev/dev/1659083790887-2022-07-29T08:36:30.887Z/bus-iot-dev.zip"
                },
                "FunctionName": "bus-iot-dev-dev-GetGtNews",
                "Handler": "controllers/notificationController.GetGtNews",
                "MemorySize": 320,
                "Role": {
                    "Fn::GetAtt": [
                        "IamRoleLambdaExecution",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs12.x",
                "Timeout": 900
            },
            "DependsOn": [
                "GetGtNewsLogGroup",
                "IamRoleLambdaExecution"
            ]
        },
        "GetGtNewsLambdaVersionjOQxHe5J8uPJtx4Uc85eZt0a2zfKgMXivs8x5F1ZQ": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
                "FunctionName": {
                    "Ref": "GetGtNewsLambdaFunction"
                },
                "CodeSha256": "lC8j77nk+9jh3tjThy4J99WP0SGfmBKQKJx2O7s9KZQ="
            }
        },
        "AddGtNewsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Ref": "ServerlessDeploymentBucket"
                    },
                    "S3Key": "serverless/bus-iot-dev/dev/1659083790887-2022-07-29T08:36:30.887Z/bus-iot-dev.zip"
                },
                "FunctionName": "bus-iot-dev-dev-AddGtNews",
                "Handler": "controllers/notificationController.AddGtNews",
                "MemorySize": 320,
                "Role": {
                    "Fn::GetAtt": [
                        "IamRoleLambdaExecution",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs12.x",
                "Timeout": 900
            },
            "DependsOn": [
                "AddGtNewsLogGroup",
                "IamRoleLambdaExecution"
            ]
        },
        "AddGtNewsLambdaVersionAuWlHBHRr83aQTTXeLOOrLzrojEf7VuzW3fk6ji3mM": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
                "FunctionName": {
                    "Ref": "AddGtNewsLambdaFunction"
                },
                "CodeSha256": "lC8j77nk+9jh3tjThy4J99WP0SGfmBKQKJx2O7s9KZQ="
            }
        },
        "UpdateGtNewsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Ref": "ServerlessDeploymentBucket"
                    },
                    "S3Key": "serverless/bus-iot-dev/dev/1659083790887-2022-07-29T08:36:30.887Z/bus-iot-dev.zip"
                },
                "FunctionName": "bus-iot-dev-dev-UpdateGtNews",
                "Handler": "controllers/notificationController.UpdateGtNews",
                "MemorySize": 320,
                "Role": {
                    "Fn::GetAtt": [
                        "IamRoleLambdaExecution",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs12.x",
                "Timeout": 900
            },
            "DependsOn": [
                "UpdateGtNewsLogGroup",
                "IamRoleLambdaExecution"
            ]
        },
        "UpdateGtNewsLambdaVersionnB7DKSHpsHemteEYInqs4MXhjlgrQkU7AdLobSNQ8": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
                "FunctionName": {
                    "Ref": "UpdateGtNewsLambdaFunction"
                },
                "CodeSha256": "lC8j77nk+9jh3tjThy4J99WP0SGfmBKQKJx2O7s9KZQ="
            }
        },
        "AvailableRoutesLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Ref": "ServerlessDeploymentBucket"
                    },
                    "S3Key": "serverless/bus-iot-dev/dev/1659083790887-2022-07-29T08:36:30.887Z/bus-iot-dev.zip"
                },
                "FunctionName": "bus-iot-dev-dev-AvailableRoutes",
                "Handler": "controllers/routesController.AvailableRoutes",
                "MemorySize": 320,
                "Role": {
                    "Fn::GetAtt": [
                        "IamRoleLambdaExecution",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs12.x",
                "Timeout": 900
            },
            "DependsOn": [
                "AvailableRoutesLogGroup",
                "IamRoleLambdaExecution"
            ]
        },
        "AvailableRoutesLambdaVersionpXLE4Q8JnxCK9j4t3SwqCgm6hckqWAwfiknb7wqOjE": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
                "FunctionName": {
                    "Ref": "AvailableRoutesLambdaFunction"
                },
                "CodeSha256": "lC8j77nk+9jh3tjThy4J99WP0SGfmBKQKJx2O7s9KZQ="
            }
        },
        "AppropriateBusListLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Ref": "ServerlessDeploymentBucket"
                    },
                    "S3Key": "serverless/bus-iot-dev/dev/1659083790887-2022-07-29T08:36:30.887Z/bus-iot-dev.zip"
                },
                "FunctionName": "bus-iot-dev-dev-AppropriateBusList",
                "Handler": "controllers/routesController.AppropriateBusList",
                "MemorySize": 320,
                "Role": {
                    "Fn::GetAtt": [
                        "IamRoleLambdaExecution",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs12.x",
                "Timeout": 900
            },
            "DependsOn": [
                "AppropriateBusListLogGroup",
                "IamRoleLambdaExecution"
            ]
        },
        "AppropriateBusListLambdaVersionqmtZbGY5NdDJf4G8FxiqjDGXEY9keKQaer4XYsFzs": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
                "FunctionName": {
                    "Ref": "AppropriateBusListLambdaFunction"
                },
                "CodeSha256": "lC8j77nk+9jh3tjThy4J99WP0SGfmBKQKJx2O7s9KZQ="
            }
        },
        "GetSelectedBusLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Ref": "ServerlessDeploymentBucket"
                    },
                    "S3Key": "serverless/bus-iot-dev/dev/1659083790887-2022-07-29T08:36:30.887Z/bus-iot-dev.zip"
                },
                "FunctionName": "bus-iot-dev-dev-GetSelectedBus",
                "Handler": "controllers/routesController.GetSelectedBus",
                "MemorySize": 320,
                "Role": {
                    "Fn::GetAtt": [
                        "IamRoleLambdaExecution",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs12.x",
                "Timeout": 900,
                "Environment": {
                    "Variables": {
                        "NODE_ENV": "dev"
                    }
                }
            },
            "DependsOn": [
                "GetSelectedBusLogGroup",
                "IamRoleLambdaExecution"
            ]
        },
        "GetSelectedBusLambdaVersiontvHidvn7aaJktVSLMEvuwKq7w534qxi4LEgpb8YwI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
                "FunctionName": {
                    "Ref": "GetSelectedBusLambdaFunction"
                },
                "CodeSha256": "lC8j77nk+9jh3tjThy4J99WP0SGfmBKQKJx2O7s9KZQ="
            }
        },
        "GetAllBusesLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Ref": "ServerlessDeploymentBucket"
                    },
                    "S3Key": "serverless/bus-iot-dev/dev/1659083790887-2022-07-29T08:36:30.887Z/bus-iot-dev.zip"
                },
                "FunctionName": "bus-iot-dev-dev-GetAllBuses",
                "Handler": "controllers/busController.GetAllBuses",
                "MemorySize": 320,
                "Role": {
                    "Fn::GetAtt": [
                        "IamRoleLambdaExecution",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs12.x",
                "Timeout": 900
            },
            "DependsOn": [
                "GetAllBusesLogGroup",
                "IamRoleLambdaExecution"
            ]
        },
        "GetAllBusesLambdaVersionv5iDXAIYJd1bS6ZiItb232A4mXZqRygmo6r0Ghsk": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
                "FunctionName": {
                    "Ref": "GetAllBusesLambdaFunction"
                },
                "CodeSha256": "lC8j77nk+9jh3tjThy4J99WP0SGfmBKQKJx2O7s9KZQ="
            }
        },
        "GetDriverRatingsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Ref": "ServerlessDeploymentBucket"
                    },
                    "S3Key": "serverless/bus-iot-dev/dev/1659083790887-2022-07-29T08:36:30.887Z/bus-iot-dev.zip"
                },
                "FunctionName": "bus-iot-dev-dev-GetDriverRatings",
                "Handler": "controllers/busController.GetDriverRatings",
                "MemorySize": 320,
                "Role": {
                    "Fn::GetAtt": [
                        "IamRoleLambdaExecution",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs12.x",
                "Timeout": 900
            },
            "DependsOn": [
                "GetDriverRatingsLogGroup",
                "IamRoleLambdaExecution"
            ]
        },
        "GetDriverRatingsLambdaVersionOVoqUgiCWAmjBlIl2BeRYklTYUkokpUARXa3XH2Os": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
                "FunctionName": {
                    "Ref": "GetDriverRatingsLambdaFunction"
                },
                "CodeSha256": "lC8j77nk+9jh3tjThy4J99WP0SGfmBKQKJx2O7s9KZQ="
            }
        },
        "AvailableBusesLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Ref": "ServerlessDeploymentBucket"
                    },
                    "S3Key": "serverless/bus-iot-dev/dev/1659083790887-2022-07-29T08:36:30.887Z/bus-iot-dev.zip"
                },
                "FunctionName": "bus-iot-dev-dev-AvailableBuses",
                "Handler": "controllers/routesController.getAll",
                "MemorySize": 320,
                "Role": {
                    "Fn::GetAtt": [
                        "IamRoleLambdaExecution",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs12.x",
                "Timeout": 900
            },
            "DependsOn": [
                "AvailableBusesLogGroup",
                "IamRoleLambdaExecution"
            ]
        },
        "AvailableBusesLambdaVersionqhd63EDmxJn6LEEl21tU1HzPEhf9V6WWma4QXTzcG4": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
                "FunctionName": {
                    "Ref": "AvailableBusesLambdaFunction"
                },
                "CodeSha256": "lC8j77nk+9jh3tjThy4J99WP0SGfmBKQKJx2O7s9KZQ="
            }
        },
        "GetBusTrackingDetailsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Ref": "ServerlessDeploymentBucket"
                    },
                    "S3Key": "serverless/bus-iot-dev/dev/1659083790887-2022-07-29T08:36:30.887Z/bus-iot-dev.zip"
                },
                "FunctionName": "bus-iot-dev-dev-GetBusTrackingDetails",
                "Handler": "controllers/trackingController.TrackingDetails",
                "MemorySize": 320,
                "Role": {
                    "Fn::GetAtt": [
                        "IamRoleLambdaExecution",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs12.x",
                "Timeout": 900
            },
            "DependsOn": [
                "GetBusTrackingDetailsLogGroup",
                "IamRoleLambdaExecution"
            ]
        },
        "GetBusTrackingDetailsLambdaVersionTLXMg39ktDiOiv8gRfLEbvLtgtt6o5kLvReJ2FO4": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
                "FunctionName": {
                    "Ref": "GetBusTrackingDetailsLambdaFunction"
                },
                "CodeSha256": "lC8j77nk+9jh3tjThy4J99WP0SGfmBKQKJx2O7s9KZQ="
            }
        },
        "BusTrackingDetailLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Ref": "ServerlessDeploymentBucket"
                    },
                    "S3Key": "serverless/bus-iot-dev/dev/1659083790887-2022-07-29T08:36:30.887Z/bus-iot-dev.zip"
                },
                "FunctionName": "bus-iot-dev-dev-BusTrackingDetail",
                "Handler": "controllers/trackingController.BusTrackingDetail",
                "MemorySize": 320,
                "Role": {
                    "Fn::GetAtt": [
                        "IamRoleLambdaExecution",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs12.x",
                "Timeout": 900
            },
            "DependsOn": [
                "BusTrackingDetailLogGroup",
                "IamRoleLambdaExecution"
            ]
        },
        "BusTrackingDetailLambdaVersionHVXd8DOC4cQmUEN58f0J5GJ007vfLFSOJPa64jippBs": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
                "FunctionName": {
                    "Ref": "BusTrackingDetailLambdaFunction"
                },
                "CodeSha256": "lC8j77nk+9jh3tjThy4J99WP0SGfmBKQKJx2O7s9KZQ="
            }
        },
        "GetBusLocationTraceGeoTabLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Ref": "ServerlessDeploymentBucket"
                    },
                    "S3Key": "serverless/bus-iot-dev/dev/1659083790887-2022-07-29T08:36:30.887Z/bus-iot-dev.zip"
                },
                "FunctionName": "bus-iot-dev-dev-GetBusLocationTraceGeoTab",
                "Handler": "controllers/GeoTab/geoTabTrackingController.GetBusLocationTrace",
                "MemorySize": 320,
                "Role": {
                    "Fn::GetAtt": [
                        "IamRoleLambdaExecution",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs12.x",
                "Timeout": 900
            },
            "DependsOn": [
                "GetBusLocationTraceGeoTabLogGroup",
                "IamRoleLambdaExecution"
            ]
        },
        "GetBusLocationTraceGeoTabLambdaVersionr5HMGYzK9jvIKbPeuHyQFASN0RSZ9jFrgyAlJoKVg": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
                "FunctionName": {
                    "Ref": "GetBusLocationTraceGeoTabLambdaFunction"
                },
                "CodeSha256": "lC8j77nk+9jh3tjThy4J99WP0SGfmBKQKJx2O7s9KZQ="
            }
        },
        "GetBusExceptionsGeoTabLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Ref": "ServerlessDeploymentBucket"
                    },
                    "S3Key": "serverless/bus-iot-dev/dev/1659083790887-2022-07-29T08:36:30.887Z/bus-iot-dev.zip"
                },
                "FunctionName": "bus-iot-dev-dev-GetBusExceptionsGeoTab",
                "Handler": "controllers/GeoTab/geoTabTrackingController.GetBusExceptions",
                "MemorySize": 320,
                "Role": {
                    "Fn::GetAtt": [
                        "IamRoleLambdaExecution",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs12.x",
                "Timeout": 900
            },
            "DependsOn": [
                "GetBusExceptionsGeoTabLogGroup",
                "IamRoleLambdaExecution"
            ]
        },
        "GetBusExceptionsGeoTabLambdaVersionJgBgIEyI9sW6ziq8l4U8fqIB9esRlINg8w8lZCIEUUA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
                "FunctionName": {
                    "Ref": "GetBusExceptionsGeoTabLambdaFunction"
                },
                "CodeSha256": "lC8j77nk+9jh3tjThy4J99WP0SGfmBKQKJx2O7s9KZQ="
            }
        },
        "GetbusTrackingDetailGeoTabLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Ref": "ServerlessDeploymentBucket"
                    },
                    "S3Key": "serverless/bus-iot-dev/dev/1659083790887-2022-07-29T08:36:30.887Z/bus-iot-dev.zip"
                },
                "FunctionName": "bus-iot-dev-dev-GetbusTrackingDetailGeoTab",
                "Handler": "controllers/GeoTab/trackingController.BusTrackingDetail",
                "MemorySize": 320,
                "Role": {
                    "Fn::GetAtt": [
                        "IamRoleLambdaExecution",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs12.x",
                "Timeout": 900
            },
            "DependsOn": [
                "GetbusTrackingDetailGeoTabLogGroup",
                "IamRoleLambdaExecution"
            ]
        },
        "GetbusTrackingDetailGeoTabLambdaVersionC7ArsSFPmeVgPx2Ypqd0ec2jd2cerjtF1CSopByew": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
                "FunctionName": {
                    "Ref": "GetbusTrackingDetailGeoTabLambdaFunction"
                },
                "CodeSha256": "lC8j77nk+9jh3tjThy4J99WP0SGfmBKQKJx2O7s9KZQ="
            }
        },
        "PiLabTripDataProcessAllAPILambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Ref": "ServerlessDeploymentBucket"
                    },
                    "S3Key": "serverless/bus-iot-dev/dev/1659083790887-2022-07-29T08:36:30.887Z/bus-iot-dev.zip"
                },
                "FunctionName": "bus-iot-dev-dev-PiLabTripDataProcessAllAPI",
                "Handler": "controllers/SNS/piLabController.TripDataProcessAllAPI",
                "MemorySize": 320,
                "Role": {
                    "Fn::GetAtt": [
                        "IamRoleLambdaExecution",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs12.x",
                "Timeout": 900
            },
            "DependsOn": [
                "PiLabTripDataProcessAllAPILogGroup",
                "IamRoleLambdaExecution"
            ]
        },
        "PiLabTripDataProcessAllAPILambdaVersionLfagAx8PB9uJJ9tUx2TW35pkvac6lUhyIBPJz1oxQYY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
                "FunctionName": {
                    "Ref": "PiLabTripDataProcessAllAPILambdaFunction"
                },
                "CodeSha256": "lC8j77nk+9jh3tjThy4J99WP0SGfmBKQKJx2O7s9KZQ="
            }
        },
        "PiLabTripDataProcessAPILambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Ref": "ServerlessDeploymentBucket"
                    },
                    "S3Key": "serverless/bus-iot-dev/dev/1659083790887-2022-07-29T08:36:30.887Z/bus-iot-dev.zip"
                },
                "FunctionName": "bus-iot-dev-dev-PiLabTripDataProcessAPI",
                "Handler": "controllers/SNS/piLabController.TripDataProcessAPI",
                "MemorySize": 320,
                "Role": {
                    "Fn::GetAtt": [
                        "IamRoleLambdaExecution",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs12.x",
                "Timeout": 900
            },
            "DependsOn": [
                "PiLabTripDataProcessAPILogGroup",
                "IamRoleLambdaExecution"
            ]
        },
        "PiLabTripDataProcessAPILambdaVersionKpyUMHVXcxYPIcRK1iGsrDYGTzXIiTNsia7c4jUdeg": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
                "FunctionName": {
                    "Ref": "PiLabTripDataProcessAPILambdaFunction"
                },
                "CodeSha256": "lC8j77nk+9jh3tjThy4J99WP0SGfmBKQKJx2O7s9KZQ="
            }
        },
        "PiLabTripDataProcessAllLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Ref": "ServerlessDeploymentBucket"
                    },
                    "S3Key": "serverless/bus-iot-dev/dev/1659083790887-2022-07-29T08:36:30.887Z/bus-iot-dev.zip"
                },
                "FunctionName": "bus-iot-dev-dev-PiLabTripDataProcessAll",
                "Handler": "controllers/SNS/piLabController.TripDataProcessAll",
                "MemorySize": 320,
                "Role": {
                    "Fn::GetAtt": [
                        "IamRoleLambdaExecution",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs12.x",
                "Timeout": 900
            },
            "DependsOn": [
                "PiLabTripDataProcessAllLogGroup",
                "IamRoleLambdaExecution"
            ]
        },
        "PiLabTripDataProcessAllLambdaVersionqdv42C90Gx9xih4MclwR8MrxH2jMgm1LeaA4VToaOE": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
                "FunctionName": {
                    "Ref": "PiLabTripDataProcessAllLambdaFunction"
                },
                "CodeSha256": "lC8j77nk+9jh3tjThy4J99WP0SGfmBKQKJx2O7s9KZQ="
            }
        },
        "TestUnderscoreGeoTabTripDataLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Ref": "ServerlessDeploymentBucket"
                    },
                    "S3Key": "serverless/bus-iot-dev/dev/1659083790887-2022-07-29T08:36:30.887Z/bus-iot-dev.zip"
                },
                "FunctionName": "bus-iot-dev-dev-Test_GeoTabTripData",
                "Handler": "controllers/GeoTab/trips.insertTrips",
                "MemorySize": 320,
                "Role": {
                    "Fn::GetAtt": [
                        "IamRoleLambdaExecution",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs12.x",
                "Timeout": 900
            },
            "DependsOn": [
                "TestUnderscoreGeoTabTripDataLogGroup",
                "IamRoleLambdaExecution"
            ]
        },
        "TestUnderscoreGeoTabTripDataLambdaVersionsN2qkneUFv7DN9Gk62Y3AA3yCpXfZJiXhXXVJglnM": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
                "FunctionName": {
                    "Ref": "TestUnderscoreGeoTabTripDataLambdaFunction"
                },
                "CodeSha256": "lC8j77nk+9jh3tjThy4J99WP0SGfmBKQKJx2O7s9KZQ="
            }
        },
        "TestUnderscoreSNSUnderscoreDynamoDbLambdaLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Ref": "ServerlessDeploymentBucket"
                    },
                    "S3Key": "serverless/bus-iot-dev/dev/1659083790887-2022-07-29T08:36:30.887Z/bus-iot-dev.zip"
                },
                "FunctionName": "bus-iot-dev-dev-Test_SNS_DynamoDbLambda",
                "Handler": "controllers/SNS/testPiLabController.SNS_DynamoDbLambda",
                "MemorySize": 320,
                "Role": {
                    "Fn::GetAtt": [
                        "IamRoleLambdaExecution",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs12.x",
                "Timeout": 900
            },
            "DependsOn": [
                "TestUnderscoreSNSUnderscoreDynamoDbLambdaLogGroup",
                "IamRoleLambdaExecution"
            ]
        },
        "TestUnderscoreSNSUnderscoreDynamoDbLambdaLambdaVersionh3v848ON3dUZx23fDS6jFHxmWCR18elH7UIbP2YVw": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
                "FunctionName": {
                    "Ref": "TestUnderscoreSNSUnderscoreDynamoDbLambdaLambdaFunction"
                },
                "CodeSha256": "lC8j77nk+9jh3tjThy4J99WP0SGfmBKQKJx2O7s9KZQ="
            }
        },
        "TestUnderscorePiLabTripDataProcessAllLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Ref": "ServerlessDeploymentBucket"
                    },
                    "S3Key": "serverless/bus-iot-dev/dev/1659083790887-2022-07-29T08:36:30.887Z/bus-iot-dev.zip"
                },
                "FunctionName": "bus-iot-dev-dev-Test_PiLabTripDataProcessAll",
                "Handler": "controllers/SNS/testPiLabController.TripDataProcessAll",
                "MemorySize": 320,
                "Role": {
                    "Fn::GetAtt": [
                        "IamRoleLambdaExecution",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs12.x",
                "Timeout": 900
            },
            "DependsOn": [
                "TestUnderscorePiLabTripDataProcessAllLogGroup",
                "IamRoleLambdaExecution"
            ]
        },
        "TestUnderscorePiLabTripDataProcessAllLambdaVersionbHwW4U6iLE2KhBzOrcaGh0x4j7hlP3Y0fDmF9qgjDkM": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
                "FunctionName": {
                    "Ref": "TestUnderscorePiLabTripDataProcessAllLambdaFunction"
                },
                "CodeSha256": "lC8j77nk+9jh3tjThy4J99WP0SGfmBKQKJx2O7s9KZQ="
            }
        },
        "TestUnderscorePiLabTripDataProcessLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Ref": "ServerlessDeploymentBucket"
                    },
                    "S3Key": "serverless/bus-iot-dev/dev/1659083790887-2022-07-29T08:36:30.887Z/bus-iot-dev.zip"
                },
                "FunctionName": "bus-iot-dev-dev-Test_PiLabTripDataProcess",
                "Handler": "controllers/SNS/testPiLabController.TripDataProcess",
                "MemorySize": 320,
                "Role": {
                    "Fn::GetAtt": [
                        "IamRoleLambdaExecution",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs12.x",
                "Timeout": 900
            },
            "DependsOn": [
                "TestUnderscorePiLabTripDataProcessLogGroup",
                "IamRoleLambdaExecution"
            ]
        },
        "TestUnderscorePiLabTripDataProcessLambdaVersionmJyp23fK1bn0vXYsGDHFrjLXQUydjskre4qnzMUCxgo": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
                "FunctionName": {
                    "Ref": "TestUnderscorePiLabTripDataProcessLambdaFunction"
                },
                "CodeSha256": "lC8j77nk+9jh3tjThy4J99WP0SGfmBKQKJx2O7s9KZQ="
            }
        },
        "TestUnderscorePiLabTripGeofencingExceptionLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Ref": "ServerlessDeploymentBucket"
                    },
                    "S3Key": "serverless/bus-iot-dev/dev/1659083790887-2022-07-29T08:36:30.887Z/bus-iot-dev.zip"
                },
                "FunctionName": "bus-iot-dev-dev-Test_PiLabTripGeofencingException",
                "Handler": "controllers/SNS/testPiLabController.GeofencingException",
                "MemorySize": 320,
                "Role": {
                    "Fn::GetAtt": [
                        "IamRoleLambdaExecution",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs12.x",
                "Timeout": 900
            },
            "DependsOn": [
                "TestUnderscorePiLabTripGeofencingExceptionLogGroup",
                "IamRoleLambdaExecution"
            ]
        },
        "TestUnderscorePiLabTripGeofencingExceptionLambdaVersionpmCW4OzIqsBrX2bEt9J1mHrYmBwnGMeTiKtxEwc": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
                "FunctionName": {
                    "Ref": "TestUnderscorePiLabTripGeofencingExceptionLambdaFunction"
                },
                "CodeSha256": "lC8j77nk+9jh3tjThy4J99WP0SGfmBKQKJx2O7s9KZQ="
            }
        },
        "TestUnderscorePiLabTripExceptionEventLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Ref": "ServerlessDeploymentBucket"
                    },
                    "S3Key": "serverless/bus-iot-dev/dev/1659083790887-2022-07-29T08:36:30.887Z/bus-iot-dev.zip"
                },
                "FunctionName": "bus-iot-dev-dev-Test_PiLabTripExceptionEvent",
                "Handler": "controllers/SNS/testPiLabController.ExceptionEvent",
                "MemorySize": 320,
                "Role": {
                    "Fn::GetAtt": [
                        "IamRoleLambdaExecution",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs12.x",
                "Timeout": 900
            },
            "DependsOn": [
                "TestUnderscorePiLabTripExceptionEventLogGroup",
                "IamRoleLambdaExecution"
            ]
        },
        "TestUnderscorePiLabTripExceptionEventLambdaVersionPDs2vflplC4kH2I6g2v6NpPfXOJsw645GPiOFx3bhYk": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
                "FunctionName": {
                    "Ref": "TestUnderscorePiLabTripExceptionEventLambdaFunction"
                },
                "CodeSha256": "lC8j77nk+9jh3tjThy4J99WP0SGfmBKQKJx2O7s9KZQ="
            }
        },
        "SnsFirehoseLambdaTriggeredLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Ref": "ServerlessDeploymentBucket"
                    },
                    "S3Key": "serverless/bus-iot-dev/dev/1659083790887-2022-07-29T08:36:30.887Z/bus-iot-dev.zip"
                },
                "FunctionName": "bus-iot-dev-dev-SnsFirehoseLambdaTriggered",
                "Handler": "controllers/SNS/piLabController.SNS_FirehoseLambda",
                "MemorySize": 320,
                "Role": {
                    "Fn::GetAtt": [
                        "IamRoleLambdaExecution",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs12.x",
                "Timeout": 900
            },
            "DependsOn": [
                "SnsFirehoseLambdaTriggeredLogGroup",
                "IamRoleLambdaExecution"
            ]
        },
        "SnsFirehoseLambdaTriggeredLambdaVersionb1yveOD0lahQdTZC8OiysahcTXboLMjVjIScCPetoN0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
                "FunctionName": {
                    "Ref": "SnsFirehoseLambdaTriggeredLambdaFunction"
                },
                "CodeSha256": "lC8j77nk+9jh3tjThy4J99WP0SGfmBKQKJx2O7s9KZQ="
            }
        },
        "SnsDynamoDbLambdaTriggeredLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Ref": "ServerlessDeploymentBucket"
                    },
                    "S3Key": "serverless/bus-iot-dev/dev/1659083790887-2022-07-29T08:36:30.887Z/bus-iot-dev.zip"
                },
                "FunctionName": "bus-iot-dev-dev-SnsDynamoDbLambdaTriggered",
                "Handler": "controllers/SNS/piLabController.SNS_DynamoDbLambda",
                "MemorySize": 320,
                "Role": {
                    "Fn::GetAtt": [
                        "IamRoleLambdaExecution",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs12.x",
                "Timeout": 900
            },
            "DependsOn": [
                "SnsDynamoDbLambdaTriggeredLogGroup",
                "IamRoleLambdaExecution"
            ]
        },
        "SnsDynamoDbLambdaTriggeredLambdaVersionf7Y2uzDZsvg4n0VJgaMdIgsDelEF5ePsODBSONqFvQ": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
                "FunctionName": {
                    "Ref": "SnsDynamoDbLambdaTriggeredLambdaFunction"
                },
                "CodeSha256": "lC8j77nk+9jh3tjThy4J99WP0SGfmBKQKJx2O7s9KZQ="
            }
        },
        "PiLabTripDataProcessAllEventsRuleSchedule1": {
            "Type": "AWS::Events::Rule",
            "Properties": {
                "ScheduleExpression": "rate(1 minute)",
                "State": "ENABLED",
                "Targets": [
                    {
                        "Arn": {
                            "Fn::GetAtt": [
                                "PiLabTripDataProcessAllLambdaFunction",
                                "Arn"
                            ]
                        },
                        "Id": "PiLabTripDataProcessAllSchedule"
                    }
                ]
            }
        },
        "PiLabTripDataProcessAllLambdaPermissionEventsRuleSchedule1": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": {
                    "Fn::GetAtt": [
                        "PiLabTripDataProcessAllLambdaFunction",
                        "Arn"
                    ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "events.amazonaws.com",
                "SourceArn": {
                    "Fn::GetAtt": [
                        "PiLabTripDataProcessAllEventsRuleSchedule1",
                        "Arn"
                    ]
                }
            }
        },
        "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
                "Name": "dev-bus-iot-dev",
                "EndpointConfiguration": {
                    "Types": [
                        "EDGE"
                    ]
                },
                "Policy": ""
            }
        },
        "ApiGatewayResourceApi": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "ParentId": {
                    "Fn::GetAtt": [
                        "ApiGatewayRestApi",
                        "RootResourceId"
                    ]
                },
                "PathPart": "api",
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                }
            }
        },
        "ApiGatewayResourceApiGetroutes": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "ParentId": {
                    "Ref": "ApiGatewayResourceApi"
                },
                "PathPart": "getroutes",
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                }
            }
        },
        "ApiGatewayResourceApiAdmin": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "ParentId": {
                    "Ref": "ApiGatewayResourceApi"
                },
                "PathPart": "admin",
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                }
            }
        },
        "ApiGatewayResourceApiAdminLogin": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "ParentId": {
                    "Ref": "ApiGatewayResourceApiAdmin"
                },
                "PathPart": "login",
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                }
            }
        },
        "ApiGatewayResourceApiAdminSignDashup": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "ParentId": {
                    "Ref": "ApiGatewayResourceApiAdmin"
                },
                "PathPart": "sign-up",
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                }
            }
        },
        "ApiGatewayResourceApiDevice": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "ParentId": {
                    "Ref": "ApiGatewayResourceApi"
                },
                "PathPart": "device",
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                }
            }
        },
        "ApiGatewayResourceApiUser": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "ParentId": {
                    "Ref": "ApiGatewayResourceApi"
                },
                "PathPart": "user",
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                }
            }
        },
        "ApiGatewayResourceApiUserUsergetstaticdetails": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "ParentId": {
                    "Ref": "ApiGatewayResourceApiUser"
                },
                "PathPart": "userGetStaticDetails",
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                }
            }
        },
        "ApiGatewayResourceApiTracking": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "ParentId": {
                    "Ref": "ApiGatewayResourceApi"
                },
                "PathPart": "tracking",
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                }
            }
        },
        "ApiGatewayResourceApiTrackingGetallstaticdetails": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "ParentId": {
                    "Ref": "ApiGatewayResourceApiTracking"
                },
                "PathPart": "getAllStaticDetails",
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                }
            }
        },
        "ApiGatewayResourceApiTrackingGetallstaticdetailsbyuser": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "ParentId": {
                    "Ref": "ApiGatewayResourceApiTracking"
                },
                "PathPart": "getAllStaticDetailsByUser",
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                }
            }
        },
        "ApiGatewayResourceApiTrackingUpdatestaticdetailsbyuser": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "ParentId": {
                    "Ref": "ApiGatewayResourceApiTracking"
                },
                "PathPart": "updateStaticDetailsByUser",
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                }
            }
        },
        "ApiGatewayResourceApiTrackingGetallbuses": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "ParentId": {
                    "Ref": "ApiGatewayResourceApiTracking"
                },
                "PathPart": "getAllBuses",
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                }
            }
        },
        "ApiGatewayResourceApiTrackingGetdriverratings": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "ParentId": {
                    "Ref": "ApiGatewayResourceApiTracking"
                },
                "PathPart": "getDriverRatings",
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                }
            }
        },
        "ApiGatewayResourceApiTrackingTrackingdetails": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "ParentId": {
                    "Ref": "ApiGatewayResourceApiTracking"
                },
                "PathPart": "trackingDetails",
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                }
            }
        },
        "ApiGatewayResourceApiTrackingBustrackingdetail": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "ParentId": {
                    "Ref": "ApiGatewayResourceApiTracking"
                },
                "PathPart": "busTrackingDetail",
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                }
            }
        },
        "ApiGatewayResourceApiContact": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "ParentId": {
                    "Ref": "ApiGatewayResourceApi"
                },
                "PathPart": "contact",
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                }
            }
        },
        "ApiGatewayResourceApiNotifications": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "ParentId": {
                    "Ref": "ApiGatewayResourceApi"
                },
                "PathPart": "notifications",
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                }
            }
        },
        "ApiGatewayResourceApiNotificationsGetall": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "ParentId": {
                    "Ref": "ApiGatewayResourceApiNotifications"
                },
                "PathPart": "getAll",
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                }
            }
        },
        "ApiGatewayResourceApiNotificationsGetmessages": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "ParentId": {
                    "Ref": "ApiGatewayResourceApiNotifications"
                },
                "PathPart": "getMessages",
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                }
            }
        },
        "ApiGatewayResourceApiNotificationsMessages": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "ParentId": {
                    "Ref": "ApiGatewayResourceApiNotifications"
                },
                "PathPart": "messages",
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                }
            }
        },
        "ApiGatewayResourceApiNotificationsGetgtnews": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "ParentId": {
                    "Ref": "ApiGatewayResourceApiNotifications"
                },
                "PathPart": "getGtNews",
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                }
            }
        },
        "ApiGatewayResourceApiNotificationsGtnews": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "ParentId": {
                    "Ref": "ApiGatewayResourceApiNotifications"
                },
                "PathPart": "GtNews",
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                }
            }
        },
        "ApiGatewayResourceApiGetallroutes": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "ParentId": {
                    "Ref": "ApiGatewayResourceApi"
                },
                "PathPart": "getAllRoutes",
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                }
            }
        },
        "ApiGatewayResourceApiGetappropriatebuses": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "ParentId": {
                    "Ref": "ApiGatewayResourceApi"
                },
                "PathPart": "getAppropriateBuses",
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                }
            }
        },
        "ApiGatewayResourceApiGetbus": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "ParentId": {
                    "Ref": "ApiGatewayResourceApi"
                },
                "PathPart": "getBus",
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                }
            }
        },
        "ApiGatewayResourceApiAvailablebuses": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "ParentId": {
                    "Ref": "ApiGatewayResourceApi"
                },
                "PathPart": "availableBuses",
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                }
            }
        },
        "ApiGatewayResourceApiGeotabtracking": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "ParentId": {
                    "Ref": "ApiGatewayResourceApi"
                },
                "PathPart": "geoTabTracking",
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                }
            }
        },
        "ApiGatewayResourceApiGeotabtrackingGetbuslocationtrace": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "ParentId": {
                    "Ref": "ApiGatewayResourceApiGeotabtracking"
                },
                "PathPart": "getBusLocationTrace",
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                }
            }
        },
        "ApiGatewayResourceApiGeotabtrackingGetbusexceptions": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "ParentId": {
                    "Ref": "ApiGatewayResourceApiGeotabtracking"
                },
                "PathPart": "getBusExceptions",
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                }
            }
        },
        "ApiGatewayResourceApiGeotabtrackingBustrackingdetail": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "ParentId": {
                    "Ref": "ApiGatewayResourceApiGeotabtracking"
                },
                "PathPart": "busTrackingDetail",
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                }
            }
        },
        "ApiGatewayResourceApiPilab": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "ParentId": {
                    "Ref": "ApiGatewayResourceApi"
                },
                "PathPart": "PiLab",
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                }
            }
        },
        "ApiGatewayResourceApiPilabTripdataprocess": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "ParentId": {
                    "Ref": "ApiGatewayResourceApiPilab"
                },
                "PathPart": "TripDataProcess",
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                }
            }
        },
        "ApiGatewayResourceApiTest": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "ParentId": {
                    "Ref": "ApiGatewayResourceApi"
                },
                "PathPart": "test",
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                }
            }
        },
        "ApiGatewayResourceApiTestGeotab": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "ParentId": {
                    "Ref": "ApiGatewayResourceApiTest"
                },
                "PathPart": "geotab",
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                }
            }
        },
        "ApiGatewayResourceApiTestPilab": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "ParentId": {
                    "Ref": "ApiGatewayResourceApiTest"
                },
                "PathPart": "pilab",
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                }
            }
        },
        "ApiGatewayResourceApiTestPilabtripdataprocess": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "ParentId": {
                    "Ref": "ApiGatewayResourceApiTest"
                },
                "PathPart": "pilabTripDataProcess",
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                }
            }
        },
        "ApiGatewayResourceApiTestTripdataprocess": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "ParentId": {
                    "Ref": "ApiGatewayResourceApiTest"
                },
                "PathPart": "TripDataProcess",
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                }
            }
        },
        "ApiGatewayResourceApiTestGeofencingexception": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "ParentId": {
                    "Ref": "ApiGatewayResourceApiTest"
                },
                "PathPart": "GeofencingException",
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                }
            }
        },
        "ApiGatewayResourceApiTestExceptionevent": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "ParentId": {
                    "Ref": "ApiGatewayResourceApiTest"
                },
                "PathPart": "ExceptionEvent",
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                }
            }
        },
        "ApiGatewayMethodApiAdminLoginOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                    {
                        "StatusCode": "200",
                        "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                        },
                        "ResponseModels": {}
                    }
                ],
                "RequestParameters": {},
                "Integration": {
                    "Type": "MOCK",
                    "RequestTemplates": {
                        "application/json": "{statusCode:200}"
                    },
                    "ContentHandling": "CONVERT_TO_TEXT",
                    "IntegrationResponses": [
                        {
                            "StatusCode": "200",
                            "ResponseParameters": {
                                "method.response.header.Access-Control-Allow-Origin": "'*'",
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                            },
                            "ResponseTemplates": {
                                "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                            }
                        }
                    ]
                },
                "ResourceId": {
                    "Ref": "ApiGatewayResourceApiAdminLogin"
                },
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                }
            }
        },
        "ApiGatewayMethodApiAdminSignDashupOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                    {
                        "StatusCode": "200",
                        "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                        },
                        "ResponseModels": {}
                    }
                ],
                "RequestParameters": {},
                "Integration": {
                    "Type": "MOCK",
                    "RequestTemplates": {
                        "application/json": "{statusCode:200}"
                    },
                    "ContentHandling": "CONVERT_TO_TEXT",
                    "IntegrationResponses": [
                        {
                            "StatusCode": "200",
                            "ResponseParameters": {
                                "method.response.header.Access-Control-Allow-Origin": "'*'",
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                            },
                            "ResponseTemplates": {
                                "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                            }
                        }
                    ]
                },
                "ResourceId": {
                    "Ref": "ApiGatewayResourceApiAdminSignDashup"
                },
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                }
            }
        },
        "ApiGatewayMethodApiDeviceOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                    {
                        "StatusCode": "200",
                        "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                        },
                        "ResponseModels": {}
                    }
                ],
                "RequestParameters": {},
                "Integration": {
                    "Type": "MOCK",
                    "RequestTemplates": {
                        "application/json": "{statusCode:200}"
                    },
                    "ContentHandling": "CONVERT_TO_TEXT",
                    "IntegrationResponses": [
                        {
                            "StatusCode": "200",
                            "ResponseParameters": {
                                "method.response.header.Access-Control-Allow-Origin": "'*'",
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT,POST,GET'"
                            },
                            "ResponseTemplates": {
                                "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                            }
                        }
                    ]
                },
                "ResourceId": {
                    "Ref": "ApiGatewayResourceApiDevice"
                },
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                }
            }
        },
        "ApiGatewayMethodApiUserUsergetstaticdetailsOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                    {
                        "StatusCode": "200",
                        "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                        },
                        "ResponseModels": {}
                    }
                ],
                "RequestParameters": {},
                "Integration": {
                    "Type": "MOCK",
                    "RequestTemplates": {
                        "application/json": "{statusCode:200}"
                    },
                    "ContentHandling": "CONVERT_TO_TEXT",
                    "IntegrationResponses": [
                        {
                            "StatusCode": "200",
                            "ResponseParameters": {
                                "method.response.header.Access-Control-Allow-Origin": "'*'",
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                            },
                            "ResponseTemplates": {
                                "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                            }
                        }
                    ]
                },
                "ResourceId": {
                    "Ref": "ApiGatewayResourceApiUserUsergetstaticdetails"
                },
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                }
            }
        },
        "ApiGatewayMethodApiTrackingGetallstaticdetailsOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                    {
                        "StatusCode": "200",
                        "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                        },
                        "ResponseModels": {}
                    }
                ],
                "RequestParameters": {},
                "Integration": {
                    "Type": "MOCK",
                    "RequestTemplates": {
                        "application/json": "{statusCode:200}"
                    },
                    "ContentHandling": "CONVERT_TO_TEXT",
                    "IntegrationResponses": [
                        {
                            "StatusCode": "200",
                            "ResponseParameters": {
                                "method.response.header.Access-Control-Allow-Origin": "'*'",
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                            },
                            "ResponseTemplates": {
                                "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                            }
                        }
                    ]
                },
                "ResourceId": {
                    "Ref": "ApiGatewayResourceApiTrackingGetallstaticdetails"
                },
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                }
            }
        },
        "ApiGatewayMethodApiTrackingGetallstaticdetailsbyuserOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                    {
                        "StatusCode": "200",
                        "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                        },
                        "ResponseModels": {}
                    }
                ],
                "RequestParameters": {},
                "Integration": {
                    "Type": "MOCK",
                    "RequestTemplates": {
                        "application/json": "{statusCode:200}"
                    },
                    "ContentHandling": "CONVERT_TO_TEXT",
                    "IntegrationResponses": [
                        {
                            "StatusCode": "200",
                            "ResponseParameters": {
                                "method.response.header.Access-Control-Allow-Origin": "'*'",
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                            },
                            "ResponseTemplates": {
                                "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                            }
                        }
                    ]
                },
                "ResourceId": {
                    "Ref": "ApiGatewayResourceApiTrackingGetallstaticdetailsbyuser"
                },
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                }
            }
        },
        "ApiGatewayMethodApiTrackingUpdatestaticdetailsbyuserOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                    {
                        "StatusCode": "200",
                        "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                        },
                        "ResponseModels": {}
                    }
                ],
                "RequestParameters": {},
                "Integration": {
                    "Type": "MOCK",
                    "RequestTemplates": {
                        "application/json": "{statusCode:200}"
                    },
                    "ContentHandling": "CONVERT_TO_TEXT",
                    "IntegrationResponses": [
                        {
                            "StatusCode": "200",
                            "ResponseParameters": {
                                "method.response.header.Access-Control-Allow-Origin": "'*'",
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT'"
                            },
                            "ResponseTemplates": {
                                "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                            }
                        }
                    ]
                },
                "ResourceId": {
                    "Ref": "ApiGatewayResourceApiTrackingUpdatestaticdetailsbyuser"
                },
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                }
            }
        },
        "ApiGatewayMethodApiContactOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                    {
                        "StatusCode": "200",
                        "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                        },
                        "ResponseModels": {}
                    }
                ],
                "RequestParameters": {},
                "Integration": {
                    "Type": "MOCK",
                    "RequestTemplates": {
                        "application/json": "{statusCode:200}"
                    },
                    "ContentHandling": "CONVERT_TO_TEXT",
                    "IntegrationResponses": [
                        {
                            "StatusCode": "200",
                            "ResponseParameters": {
                                "method.response.header.Access-Control-Allow-Origin": "'*'",
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT,POST,GET'"
                            },
                            "ResponseTemplates": {
                                "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                            }
                        }
                    ]
                },
                "ResourceId": {
                    "Ref": "ApiGatewayResourceApiContact"
                },
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                }
            }
        },
        "ApiGatewayMethodApiNotificationsGetallOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                    {
                        "StatusCode": "200",
                        "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                        },
                        "ResponseModels": {}
                    }
                ],
                "RequestParameters": {},
                "Integration": {
                    "Type": "MOCK",
                    "RequestTemplates": {
                        "application/json": "{statusCode:200}"
                    },
                    "ContentHandling": "CONVERT_TO_TEXT",
                    "IntegrationResponses": [
                        {
                            "StatusCode": "200",
                            "ResponseParameters": {
                                "method.response.header.Access-Control-Allow-Origin": "'*'",
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                            },
                            "ResponseTemplates": {
                                "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                            }
                        }
                    ]
                },
                "ResourceId": {
                    "Ref": "ApiGatewayResourceApiNotificationsGetall"
                },
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                }
            }
        },
        "ApiGatewayMethodApiNotificationsOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                    {
                        "StatusCode": "200",
                        "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                        },
                        "ResponseModels": {}
                    }
                ],
                "RequestParameters": {},
                "Integration": {
                    "Type": "MOCK",
                    "RequestTemplates": {
                        "application/json": "{statusCode:200}"
                    },
                    "ContentHandling": "CONVERT_TO_TEXT",
                    "IntegrationResponses": [
                        {
                            "StatusCode": "200",
                            "ResponseParameters": {
                                "method.response.header.Access-Control-Allow-Origin": "'*'",
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT,POST,GET'"
                            },
                            "ResponseTemplates": {
                                "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                            }
                        }
                    ]
                },
                "ResourceId": {
                    "Ref": "ApiGatewayResourceApiNotifications"
                },
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                }
            }
        },
        "ApiGatewayMethodApiNotificationsGetmessagesOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                    {
                        "StatusCode": "200",
                        "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                        },
                        "ResponseModels": {}
                    }
                ],
                "RequestParameters": {},
                "Integration": {
                    "Type": "MOCK",
                    "RequestTemplates": {
                        "application/json": "{statusCode:200}"
                    },
                    "ContentHandling": "CONVERT_TO_TEXT",
                    "IntegrationResponses": [
                        {
                            "StatusCode": "200",
                            "ResponseParameters": {
                                "method.response.header.Access-Control-Allow-Origin": "'*'",
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                            },
                            "ResponseTemplates": {
                                "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                            }
                        }
                    ]
                },
                "ResourceId": {
                    "Ref": "ApiGatewayResourceApiNotificationsGetmessages"
                },
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                }
            }
        },
        "ApiGatewayMethodApiNotificationsMessagesOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                    {
                        "StatusCode": "200",
                        "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                        },
                        "ResponseModels": {}
                    }
                ],
                "RequestParameters": {},
                "Integration": {
                    "Type": "MOCK",
                    "RequestTemplates": {
                        "application/json": "{statusCode:200}"
                    },
                    "ContentHandling": "CONVERT_TO_TEXT",
                    "IntegrationResponses": [
                        {
                            "StatusCode": "200",
                            "ResponseParameters": {
                                "method.response.header.Access-Control-Allow-Origin": "'*'",
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT,POST,GET'"
                            },
                            "ResponseTemplates": {
                                "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                            }
                        }
                    ]
                },
                "ResourceId": {
                    "Ref": "ApiGatewayResourceApiNotificationsMessages"
                },
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                }
            }
        },
        "ApiGatewayMethodApiNotificationsGetgtnewsOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                    {
                        "StatusCode": "200",
                        "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                        },
                        "ResponseModels": {}
                    }
                ],
                "RequestParameters": {},
                "Integration": {
                    "Type": "MOCK",
                    "RequestTemplates": {
                        "application/json": "{statusCode:200}"
                    },
                    "ContentHandling": "CONVERT_TO_TEXT",
                    "IntegrationResponses": [
                        {
                            "StatusCode": "200",
                            "ResponseParameters": {
                                "method.response.header.Access-Control-Allow-Origin": "'*'",
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                            },
                            "ResponseTemplates": {
                                "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                            }
                        }
                    ]
                },
                "ResourceId": {
                    "Ref": "ApiGatewayResourceApiNotificationsGetgtnews"
                },
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                }
            }
        },
        "ApiGatewayMethodApiNotificationsGtnewsOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                    {
                        "StatusCode": "200",
                        "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                        },
                        "ResponseModels": {}
                    }
                ],
                "RequestParameters": {},
                "Integration": {
                    "Type": "MOCK",
                    "RequestTemplates": {
                        "application/json": "{statusCode:200}"
                    },
                    "ContentHandling": "CONVERT_TO_TEXT",
                    "IntegrationResponses": [
                        {
                            "StatusCode": "200",
                            "ResponseParameters": {
                                "method.response.header.Access-Control-Allow-Origin": "'*'",
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT,POST,GET'"
                            },
                            "ResponseTemplates": {
                                "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                            }
                        }
                    ]
                },
                "ResourceId": {
                    "Ref": "ApiGatewayResourceApiNotificationsGtnews"
                },
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                }
            }
        },
        "ApiGatewayMethodApiGetallroutesOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                    {
                        "StatusCode": "200",
                        "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                        },
                        "ResponseModels": {}
                    }
                ],
                "RequestParameters": {},
                "Integration": {
                    "Type": "MOCK",
                    "RequestTemplates": {
                        "application/json": "{statusCode:200}"
                    },
                    "ContentHandling": "CONVERT_TO_TEXT",
                    "IntegrationResponses": [
                        {
                            "StatusCode": "200",
                            "ResponseParameters": {
                                "method.response.header.Access-Control-Allow-Origin": "'*'",
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                            },
                            "ResponseTemplates": {
                                "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                            }
                        }
                    ]
                },
                "ResourceId": {
                    "Ref": "ApiGatewayResourceApiGetallroutes"
                },
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                }
            }
        },
        "ApiGatewayMethodApiGetappropriatebusesOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                    {
                        "StatusCode": "200",
                        "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                        },
                        "ResponseModels": {}
                    }
                ],
                "RequestParameters": {},
                "Integration": {
                    "Type": "MOCK",
                    "RequestTemplates": {
                        "application/json": "{statusCode:200}"
                    },
                    "ContentHandling": "CONVERT_TO_TEXT",
                    "IntegrationResponses": [
                        {
                            "StatusCode": "200",
                            "ResponseParameters": {
                                "method.response.header.Access-Control-Allow-Origin": "'*'",
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                            },
                            "ResponseTemplates": {
                                "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                            }
                        }
                    ]
                },
                "ResourceId": {
                    "Ref": "ApiGatewayResourceApiGetappropriatebuses"
                },
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                }
            }
        },
        "ApiGatewayMethodApiGetbusOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                    {
                        "StatusCode": "200",
                        "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                        },
                        "ResponseModels": {}
                    }
                ],
                "RequestParameters": {},
                "Integration": {
                    "Type": "MOCK",
                    "RequestTemplates": {
                        "application/json": "{statusCode:200}"
                    },
                    "ContentHandling": "CONVERT_TO_TEXT",
                    "IntegrationResponses": [
                        {
                            "StatusCode": "200",
                            "ResponseParameters": {
                                "method.response.header.Access-Control-Allow-Origin": "'*'",
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                            },
                            "ResponseTemplates": {
                                "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                            }
                        }
                    ]
                },
                "ResourceId": {
                    "Ref": "ApiGatewayResourceApiGetbus"
                },
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                }
            }
        },
        "ApiGatewayMethodApiTrackingGetallbusesOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                    {
                        "StatusCode": "200",
                        "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                        },
                        "ResponseModels": {}
                    }
                ],
                "RequestParameters": {},
                "Integration": {
                    "Type": "MOCK",
                    "RequestTemplates": {
                        "application/json": "{statusCode:200}"
                    },
                    "ContentHandling": "CONVERT_TO_TEXT",
                    "IntegrationResponses": [
                        {
                            "StatusCode": "200",
                            "ResponseParameters": {
                                "method.response.header.Access-Control-Allow-Origin": "'*'",
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                            },
                            "ResponseTemplates": {
                                "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                            }
                        }
                    ]
                },
                "ResourceId": {
                    "Ref": "ApiGatewayResourceApiTrackingGetallbuses"
                },
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                }
            }
        },
        "ApiGatewayMethodApiTrackingGetdriverratingsOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                    {
                        "StatusCode": "200",
                        "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                        },
                        "ResponseModels": {}
                    }
                ],
                "RequestParameters": {},
                "Integration": {
                    "Type": "MOCK",
                    "RequestTemplates": {
                        "application/json": "{statusCode:200}"
                    },
                    "ContentHandling": "CONVERT_TO_TEXT",
                    "IntegrationResponses": [
                        {
                            "StatusCode": "200",
                            "ResponseParameters": {
                                "method.response.header.Access-Control-Allow-Origin": "'*'",
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                            },
                            "ResponseTemplates": {
                                "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                            }
                        }
                    ]
                },
                "ResourceId": {
                    "Ref": "ApiGatewayResourceApiTrackingGetdriverratings"
                },
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                }
            }
        },
        "ApiGatewayMethodApiAvailablebusesOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                    {
                        "StatusCode": "200",
                        "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                        },
                        "ResponseModels": {}
                    }
                ],
                "RequestParameters": {},
                "Integration": {
                    "Type": "MOCK",
                    "RequestTemplates": {
                        "application/json": "{statusCode:200}"
                    },
                    "ContentHandling": "CONVERT_TO_TEXT",
                    "IntegrationResponses": [
                        {
                            "StatusCode": "200",
                            "ResponseParameters": {
                                "method.response.header.Access-Control-Allow-Origin": "'*'",
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                            },
                            "ResponseTemplates": {
                                "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                            }
                        }
                    ]
                },
                "ResourceId": {
                    "Ref": "ApiGatewayResourceApiAvailablebuses"
                },
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                }
            }
        },
        "ApiGatewayMethodApiTrackingTrackingdetailsOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                    {
                        "StatusCode": "200",
                        "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                        },
                        "ResponseModels": {}
                    }
                ],
                "RequestParameters": {},
                "Integration": {
                    "Type": "MOCK",
                    "RequestTemplates": {
                        "application/json": "{statusCode:200}"
                    },
                    "ContentHandling": "CONVERT_TO_TEXT",
                    "IntegrationResponses": [
                        {
                            "StatusCode": "200",
                            "ResponseParameters": {
                                "method.response.header.Access-Control-Allow-Origin": "'*'",
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                            },
                            "ResponseTemplates": {
                                "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                            }
                        }
                    ]
                },
                "ResourceId": {
                    "Ref": "ApiGatewayResourceApiTrackingTrackingdetails"
                },
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                }
            }
        },
        "ApiGatewayMethodApiTrackingBustrackingdetailOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                    {
                        "StatusCode": "200",
                        "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                        },
                        "ResponseModels": {}
                    }
                ],
                "RequestParameters": {},
                "Integration": {
                    "Type": "MOCK",
                    "RequestTemplates": {
                        "application/json": "{statusCode:200}"
                    },
                    "ContentHandling": "CONVERT_TO_TEXT",
                    "IntegrationResponses": [
                        {
                            "StatusCode": "200",
                            "ResponseParameters": {
                                "method.response.header.Access-Control-Allow-Origin": "'*'",
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                            },
                            "ResponseTemplates": {
                                "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                            }
                        }
                    ]
                },
                "ResourceId": {
                    "Ref": "ApiGatewayResourceApiTrackingBustrackingdetail"
                },
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                }
            }
        },
        "ApiGatewayMethodApiGeotabtrackingGetbuslocationtraceOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                    {
                        "StatusCode": "200",
                        "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                        },
                        "ResponseModels": {}
                    }
                ],
                "RequestParameters": {},
                "Integration": {
                    "Type": "MOCK",
                    "RequestTemplates": {
                        "application/json": "{statusCode:200}"
                    },
                    "ContentHandling": "CONVERT_TO_TEXT",
                    "IntegrationResponses": [
                        {
                            "StatusCode": "200",
                            "ResponseParameters": {
                                "method.response.header.Access-Control-Allow-Origin": "'*'",
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                            },
                            "ResponseTemplates": {
                                "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                            }
                        }
                    ]
                },
                "ResourceId": {
                    "Ref": "ApiGatewayResourceApiGeotabtrackingGetbuslocationtrace"
                },
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                }
            }
        },
        "ApiGatewayMethodApiGeotabtrackingGetbusexceptionsOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                    {
                        "StatusCode": "200",
                        "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                        },
                        "ResponseModels": {}
                    }
                ],
                "RequestParameters": {},
                "Integration": {
                    "Type": "MOCK",
                    "RequestTemplates": {
                        "application/json": "{statusCode:200}"
                    },
                    "ContentHandling": "CONVERT_TO_TEXT",
                    "IntegrationResponses": [
                        {
                            "StatusCode": "200",
                            "ResponseParameters": {
                                "method.response.header.Access-Control-Allow-Origin": "'*'",
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                            },
                            "ResponseTemplates": {
                                "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                            }
                        }
                    ]
                },
                "ResourceId": {
                    "Ref": "ApiGatewayResourceApiGeotabtrackingGetbusexceptions"
                },
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                }
            }
        },
        "ApiGatewayMethodApiGeotabtrackingBustrackingdetailOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                    {
                        "StatusCode": "200",
                        "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                        },
                        "ResponseModels": {}
                    }
                ],
                "RequestParameters": {},
                "Integration": {
                    "Type": "MOCK",
                    "RequestTemplates": {
                        "application/json": "{statusCode:200}"
                    },
                    "ContentHandling": "CONVERT_TO_TEXT",
                    "IntegrationResponses": [
                        {
                            "StatusCode": "200",
                            "ResponseParameters": {
                                "method.response.header.Access-Control-Allow-Origin": "'*'",
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                            },
                            "ResponseTemplates": {
                                "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                            }
                        }
                    ]
                },
                "ResourceId": {
                    "Ref": "ApiGatewayResourceApiGeotabtrackingBustrackingdetail"
                },
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                }
            }
        },
        "ApiGatewayMethodApiPilabTripdataprocessOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                    {
                        "StatusCode": "200",
                        "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                        },
                        "ResponseModels": {}
                    }
                ],
                "RequestParameters": {},
                "Integration": {
                    "Type": "MOCK",
                    "RequestTemplates": {
                        "application/json": "{statusCode:200}"
                    },
                    "ContentHandling": "CONVERT_TO_TEXT",
                    "IntegrationResponses": [
                        {
                            "StatusCode": "200",
                            "ResponseParameters": {
                                "method.response.header.Access-Control-Allow-Origin": "'*'",
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST,GET'"
                            },
                            "ResponseTemplates": {
                                "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                            }
                        }
                    ]
                },
                "ResourceId": {
                    "Ref": "ApiGatewayResourceApiPilabTripdataprocess"
                },
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                }
            }
        },
        "ApiGatewayMethodApiTestGeotabOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                    {
                        "StatusCode": "200",
                        "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                        },
                        "ResponseModels": {}
                    }
                ],
                "RequestParameters": {},
                "Integration": {
                    "Type": "MOCK",
                    "RequestTemplates": {
                        "application/json": "{statusCode:200}"
                    },
                    "ContentHandling": "CONVERT_TO_TEXT",
                    "IntegrationResponses": [
                        {
                            "StatusCode": "200",
                            "ResponseParameters": {
                                "method.response.header.Access-Control-Allow-Origin": "'*'",
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                            },
                            "ResponseTemplates": {
                                "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                            }
                        }
                    ]
                },
                "ResourceId": {
                    "Ref": "ApiGatewayResourceApiTestGeotab"
                },
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                }
            }
        },
        "ApiGatewayMethodApiTestPilabOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                    {
                        "StatusCode": "200",
                        "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                        },
                        "ResponseModels": {}
                    }
                ],
                "RequestParameters": {},
                "Integration": {
                    "Type": "MOCK",
                    "RequestTemplates": {
                        "application/json": "{statusCode:200}"
                    },
                    "ContentHandling": "CONVERT_TO_TEXT",
                    "IntegrationResponses": [
                        {
                            "StatusCode": "200",
                            "ResponseParameters": {
                                "method.response.header.Access-Control-Allow-Origin": "'*'",
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                            },
                            "ResponseTemplates": {
                                "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                            }
                        }
                    ]
                },
                "ResourceId": {
                    "Ref": "ApiGatewayResourceApiTestPilab"
                },
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                }
            }
        },
        "ApiGatewayMethodApiTestPilabtripdataprocessOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                    {
                        "StatusCode": "200",
                        "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                        },
                        "ResponseModels": {}
                    }
                ],
                "RequestParameters": {},
                "Integration": {
                    "Type": "MOCK",
                    "RequestTemplates": {
                        "application/json": "{statusCode:200}"
                    },
                    "ContentHandling": "CONVERT_TO_TEXT",
                    "IntegrationResponses": [
                        {
                            "StatusCode": "200",
                            "ResponseParameters": {
                                "method.response.header.Access-Control-Allow-Origin": "'*'",
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                            },
                            "ResponseTemplates": {
                                "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                            }
                        }
                    ]
                },
                "ResourceId": {
                    "Ref": "ApiGatewayResourceApiTestPilabtripdataprocess"
                },
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                }
            }
        },
        "ApiGatewayMethodApiTestTripdataprocessOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                    {
                        "StatusCode": "200",
                        "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                        },
                        "ResponseModels": {}
                    }
                ],
                "RequestParameters": {},
                "Integration": {
                    "Type": "MOCK",
                    "RequestTemplates": {
                        "application/json": "{statusCode:200}"
                    },
                    "ContentHandling": "CONVERT_TO_TEXT",
                    "IntegrationResponses": [
                        {
                            "StatusCode": "200",
                            "ResponseParameters": {
                                "method.response.header.Access-Control-Allow-Origin": "'*'",
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                            },
                            "ResponseTemplates": {
                                "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                            }
                        }
                    ]
                },
                "ResourceId": {
                    "Ref": "ApiGatewayResourceApiTestTripdataprocess"
                },
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                }
            }
        },
        "ApiGatewayMethodApiTestGeofencingexceptionOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                    {
                        "StatusCode": "200",
                        "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                        },
                        "ResponseModels": {}
                    }
                ],
                "RequestParameters": {},
                "Integration": {
                    "Type": "MOCK",
                    "RequestTemplates": {
                        "application/json": "{statusCode:200}"
                    },
                    "ContentHandling": "CONVERT_TO_TEXT",
                    "IntegrationResponses": [
                        {
                            "StatusCode": "200",
                            "ResponseParameters": {
                                "method.response.header.Access-Control-Allow-Origin": "'*'",
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                            },
                            "ResponseTemplates": {
                                "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                            }
                        }
                    ]
                },
                "ResourceId": {
                    "Ref": "ApiGatewayResourceApiTestGeofencingexception"
                },
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                }
            }
        },
        "ApiGatewayMethodApiTestExceptioneventOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                    {
                        "StatusCode": "200",
                        "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                        },
                        "ResponseModels": {}
                    }
                ],
                "RequestParameters": {},
                "Integration": {
                    "Type": "MOCK",
                    "RequestTemplates": {
                        "application/json": "{statusCode:200}"
                    },
                    "ContentHandling": "CONVERT_TO_TEXT",
                    "IntegrationResponses": [
                        {
                            "StatusCode": "200",
                            "ResponseParameters": {
                                "method.response.header.Access-Control-Allow-Origin": "'*'",
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                            },
                            "ResponseTemplates": {
                                "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                            }
                        }
                    ]
                },
                "ResourceId": {
                    "Ref": "ApiGatewayResourceApiTestExceptionevent"
                },
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                }
            }
        },
        "ApiGatewayMethodApiGetroutesGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                    "Ref": "ApiGatewayResourceApiGetroutes"
                },
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": false,
                "AuthorizationType": "NONE",
                "Integration": {
                    "IntegrationHttpMethod": "POST",
                    "Type": "AWS_PROXY",
                    "Uri": {
                        "Fn::Join": [
                            "",
                            [
                                "arn:",
                                {
                                    "Ref": "AWS::Partition"
                                },
                                ":apigateway:",
                                {
                                    "Ref": "AWS::Region"
                                },
                                ":lambda:path/2015-03-31/functions/",
                                {
                                    "Fn::GetAtt": [
                                        "DetermineRouteLambdaFunction",
                                        "Arn"
                                    ]
                                },
                                "/invocations"
                            ]
                        ]
                    }
                },
                "MethodResponses": []
            }
        },
        "ApiGatewayMethodApiAdminLoginPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                    "Ref": "ApiGatewayResourceApiAdminLogin"
                },
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": false,
                "AuthorizationType": "NONE",
                "Integration": {
                    "IntegrationHttpMethod": "POST",
                    "Type": "AWS_PROXY",
                    "Uri": {
                        "Fn::Join": [
                            "",
                            [
                                "arn:",
                                {
                                    "Ref": "AWS::Partition"
                                },
                                ":apigateway:",
                                {
                                    "Ref": "AWS::Region"
                                },
                                ":lambda:path/2015-03-31/functions/",
                                {
                                    "Fn::GetAtt": [
                                        "AdminLoginLambdaFunction",
                                        "Arn"
                                    ]
                                },
                                "/invocations"
                            ]
                        ]
                    }
                },
                "MethodResponses": []
            }
        },
        "ApiGatewayMethodApiAdminSignDashupPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                    "Ref": "ApiGatewayResourceApiAdminSignDashup"
                },
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": false,
                "AuthorizationType": "NONE",
                "Integration": {
                    "IntegrationHttpMethod": "POST",
                    "Type": "AWS_PROXY",
                    "Uri": {
                        "Fn::Join": [
                            "",
                            [
                                "arn:",
                                {
                                    "Ref": "AWS::Partition"
                                },
                                ":apigateway:",
                                {
                                    "Ref": "AWS::Region"
                                },
                                ":lambda:path/2015-03-31/functions/",
                                {
                                    "Fn::GetAtt": [
                                        "AdminSignUpLambdaFunction",
                                        "Arn"
                                    ]
                                },
                                "/invocations"
                            ]
                        ]
                    }
                },
                "MethodResponses": []
            }
        },
        "ApiGatewayMethodApiDeviceGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                    "Ref": "ApiGatewayResourceApiDevice"
                },
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": false,
                "AuthorizationType": "NONE",
                "Integration": {
                    "IntegrationHttpMethod": "POST",
                    "Type": "AWS_PROXY",
                    "Uri": {
                        "Fn::Join": [
                            "",
                            [
                                "arn:",
                                {
                                    "Ref": "AWS::Partition"
                                },
                                ":apigateway:",
                                {
                                    "Ref": "AWS::Region"
                                },
                                ":lambda:path/2015-03-31/functions/",
                                {
                                    "Fn::GetAtt": [
                                        "GetDeviceLambdaFunction",
                                        "Arn"
                                    ]
                                },
                                "/invocations"
                            ]
                        ]
                    }
                },
                "MethodResponses": []
            }
        },
        "ApiGatewayMethodApiDevicePost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                    "Ref": "ApiGatewayResourceApiDevice"
                },
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": false,
                "AuthorizationType": "NONE",
                "Integration": {
                    "IntegrationHttpMethod": "POST",
                    "Type": "AWS_PROXY",
                    "Uri": {
                        "Fn::Join": [
                            "",
                            [
                                "arn:",
                                {
                                    "Ref": "AWS::Partition"
                                },
                                ":apigateway:",
                                {
                                    "Ref": "AWS::Region"
                                },
                                ":lambda:path/2015-03-31/functions/",
                                {
                                    "Fn::GetAtt": [
                                        "AddDeviceLambdaFunction",
                                        "Arn"
                                    ]
                                },
                                "/invocations"
                            ]
                        ]
                    }
                },
                "MethodResponses": []
            }
        },
        "ApiGatewayMethodApiDevicePut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "HttpMethod": "PUT",
                "RequestParameters": {},
                "ResourceId": {
                    "Ref": "ApiGatewayResourceApiDevice"
                },
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": false,
                "AuthorizationType": "NONE",
                "Integration": {
                    "IntegrationHttpMethod": "POST",
                    "Type": "AWS_PROXY",
                    "Uri": {
                        "Fn::Join": [
                            "",
                            [
                                "arn:",
                                {
                                    "Ref": "AWS::Partition"
                                },
                                ":apigateway:",
                                {
                                    "Ref": "AWS::Region"
                                },
                                ":lambda:path/2015-03-31/functions/",
                                {
                                    "Fn::GetAtt": [
                                        "UpdateDeviceLambdaFunction",
                                        "Arn"
                                    ]
                                },
                                "/invocations"
                            ]
                        ]
                    }
                },
                "MethodResponses": []
            }
        },
        "ApiGatewayMethodApiUserUsergetstaticdetailsGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                    "Ref": "ApiGatewayResourceApiUserUsergetstaticdetails"
                },
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": false,
                "AuthorizationType": "NONE",
                "Integration": {
                    "IntegrationHttpMethod": "POST",
                    "Type": "AWS_PROXY",
                    "Uri": {
                        "Fn::Join": [
                            "",
                            [
                                "arn:",
                                {
                                    "Ref": "AWS::Partition"
                                },
                                ":apigateway:",
                                {
                                    "Ref": "AWS::Region"
                                },
                                ":lambda:path/2015-03-31/functions/",
                                {
                                    "Fn::GetAtt": [
                                        "UserStaticDetailsLambdaFunction",
                                        "Arn"
                                    ]
                                },
                                "/invocations"
                            ]
                        ]
                    }
                },
                "MethodResponses": []
            }
        },
        "ApiGatewayMethodApiTrackingGetallstaticdetailsGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                    "Ref": "ApiGatewayResourceApiTrackingGetallstaticdetails"
                },
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": false,
                "AuthorizationType": "NONE",
                "Integration": {
                    "IntegrationHttpMethod": "POST",
                    "Type": "AWS_PROXY",
                    "Uri": {
                        "Fn::Join": [
                            "",
                            [
                                "arn:",
                                {
                                    "Ref": "AWS::Partition"
                                },
                                ":apigateway:",
                                {
                                    "Ref": "AWS::Region"
                                },
                                ":lambda:path/2015-03-31/functions/",
                                {
                                    "Fn::GetAtt": [
                                        "GetAllStaticDetailsLambdaFunction",
                                        "Arn"
                                    ]
                                },
                                "/invocations"
                            ]
                        ]
                    }
                },
                "MethodResponses": []
            }
        },
        "ApiGatewayMethodApiTrackingGetallstaticdetailsbyuserGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                    "Ref": "ApiGatewayResourceApiTrackingGetallstaticdetailsbyuser"
                },
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": false,
                "AuthorizationType": "NONE",
                "Integration": {
                    "IntegrationHttpMethod": "POST",
                    "Type": "AWS_PROXY",
                    "Uri": {
                        "Fn::Join": [
                            "",
                            [
                                "arn:",
                                {
                                    "Ref": "AWS::Partition"
                                },
                                ":apigateway:",
                                {
                                    "Ref": "AWS::Region"
                                },
                                ":lambda:path/2015-03-31/functions/",
                                {
                                    "Fn::GetAtt": [
                                        "GetAllStaticDetailsByUserLambdaFunction",
                                        "Arn"
                                    ]
                                },
                                "/invocations"
                            ]
                        ]
                    }
                },
                "MethodResponses": []
            }
        },
        "ApiGatewayMethodApiTrackingUpdatestaticdetailsbyuserPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "HttpMethod": "PUT",
                "RequestParameters": {},
                "ResourceId": {
                    "Ref": "ApiGatewayResourceApiTrackingUpdatestaticdetailsbyuser"
                },
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": false,
                "AuthorizationType": "NONE",
                "Integration": {
                    "IntegrationHttpMethod": "POST",
                    "Type": "AWS_PROXY",
                    "Uri": {
                        "Fn::Join": [
                            "",
                            [
                                "arn:",
                                {
                                    "Ref": "AWS::Partition"
                                },
                                ":apigateway:",
                                {
                                    "Ref": "AWS::Region"
                                },
                                ":lambda:path/2015-03-31/functions/",
                                {
                                    "Fn::GetAtt": [
                                        "UpdateStaticDetailsByUserLambdaFunction",
                                        "Arn"
                                    ]
                                },
                                "/invocations"
                            ]
                        ]
                    }
                },
                "MethodResponses": []
            }
        },
        "ApiGatewayMethodApiContactGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                    "Ref": "ApiGatewayResourceApiContact"
                },
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": false,
                "AuthorizationType": "NONE",
                "Integration": {
                    "IntegrationHttpMethod": "POST",
                    "Type": "AWS_PROXY",
                    "Uri": {
                        "Fn::Join": [
                            "",
                            [
                                "arn:",
                                {
                                    "Ref": "AWS::Partition"
                                },
                                ":apigateway:",
                                {
                                    "Ref": "AWS::Region"
                                },
                                ":lambda:path/2015-03-31/functions/",
                                {
                                    "Fn::GetAtt": [
                                        "GetContactLambdaFunction",
                                        "Arn"
                                    ]
                                },
                                "/invocations"
                            ]
                        ]
                    }
                },
                "MethodResponses": []
            }
        },
        "ApiGatewayMethodApiContactPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                    "Ref": "ApiGatewayResourceApiContact"
                },
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": false,
                "AuthorizationType": "NONE",
                "Integration": {
                    "IntegrationHttpMethod": "POST",
                    "Type": "AWS_PROXY",
                    "Uri": {
                        "Fn::Join": [
                            "",
                            [
                                "arn:",
                                {
                                    "Ref": "AWS::Partition"
                                },
                                ":apigateway:",
                                {
                                    "Ref": "AWS::Region"
                                },
                                ":lambda:path/2015-03-31/functions/",
                                {
                                    "Fn::GetAtt": [
                                        "AddContactLambdaFunction",
                                        "Arn"
                                    ]
                                },
                                "/invocations"
                            ]
                        ]
                    }
                },
                "MethodResponses": []
            }
        },
        "ApiGatewayMethodApiContactPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "HttpMethod": "PUT",
                "RequestParameters": {},
                "ResourceId": {
                    "Ref": "ApiGatewayResourceApiContact"
                },
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": false,
                "AuthorizationType": "NONE",
                "Integration": {
                    "IntegrationHttpMethod": "POST",
                    "Type": "AWS_PROXY",
                    "Uri": {
                        "Fn::Join": [
                            "",
                            [
                                "arn:",
                                {
                                    "Ref": "AWS::Partition"
                                },
                                ":apigateway:",
                                {
                                    "Ref": "AWS::Region"
                                },
                                ":lambda:path/2015-03-31/functions/",
                                {
                                    "Fn::GetAtt": [
                                        "UpdateContactLambdaFunction",
                                        "Arn"
                                    ]
                                },
                                "/invocations"
                            ]
                        ]
                    }
                },
                "MethodResponses": []
            }
        },
        "ApiGatewayMethodApiNotificationsGetallGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                    "Ref": "ApiGatewayResourceApiNotificationsGetall"
                },
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": false,
                "AuthorizationType": "NONE",
                "Integration": {
                    "IntegrationHttpMethod": "POST",
                    "Type": "AWS_PROXY",
                    "Uri": {
                        "Fn::Join": [
                            "",
                            [
                                "arn:",
                                {
                                    "Ref": "AWS::Partition"
                                },
                                ":apigateway:",
                                {
                                    "Ref": "AWS::Region"
                                },
                                ":lambda:path/2015-03-31/functions/",
                                {
                                    "Fn::GetAtt": [
                                        "GetNotifications1LambdaFunction",
                                        "Arn"
                                    ]
                                },
                                "/invocations"
                            ]
                        ]
                    }
                },
                "MethodResponses": []
            }
        },
        "ApiGatewayMethodApiNotificationsGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                    "Ref": "ApiGatewayResourceApiNotifications"
                },
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": false,
                "AuthorizationType": "NONE",
                "Integration": {
                    "IntegrationHttpMethod": "POST",
                    "Type": "AWS_PROXY",
                    "Uri": {
                        "Fn::Join": [
                            "",
                            [
                                "arn:",
                                {
                                    "Ref": "AWS::Partition"
                                },
                                ":apigateway:",
                                {
                                    "Ref": "AWS::Region"
                                },
                                ":lambda:path/2015-03-31/functions/",
                                {
                                    "Fn::GetAtt": [
                                        "GetNotificationsLambdaFunction",
                                        "Arn"
                                    ]
                                },
                                "/invocations"
                            ]
                        ]
                    }
                },
                "MethodResponses": []
            }
        },
        "ApiGatewayMethodApiNotificationsPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                    "Ref": "ApiGatewayResourceApiNotifications"
                },
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": false,
                "AuthorizationType": "NONE",
                "Integration": {
                    "IntegrationHttpMethod": "POST",
                    "Type": "AWS_PROXY",
                    "Uri": {
                        "Fn::Join": [
                            "",
                            [
                                "arn:",
                                {
                                    "Ref": "AWS::Partition"
                                },
                                ":apigateway:",
                                {
                                    "Ref": "AWS::Region"
                                },
                                ":lambda:path/2015-03-31/functions/",
                                {
                                    "Fn::GetAtt": [
                                        "AddNotificationsLambdaFunction",
                                        "Arn"
                                    ]
                                },
                                "/invocations"
                            ]
                        ]
                    }
                },
                "MethodResponses": []
            }
        },
        "ApiGatewayMethodApiNotificationsPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "HttpMethod": "PUT",
                "RequestParameters": {},
                "ResourceId": {
                    "Ref": "ApiGatewayResourceApiNotifications"
                },
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": false,
                "AuthorizationType": "NONE",
                "Integration": {
                    "IntegrationHttpMethod": "POST",
                    "Type": "AWS_PROXY",
                    "Uri": {
                        "Fn::Join": [
                            "",
                            [
                                "arn:",
                                {
                                    "Ref": "AWS::Partition"
                                },
                                ":apigateway:",
                                {
                                    "Ref": "AWS::Region"
                                },
                                ":lambda:path/2015-03-31/functions/",
                                {
                                    "Fn::GetAtt": [
                                        "UpdateNotificationsLambdaFunction",
                                        "Arn"
                                    ]
                                },
                                "/invocations"
                            ]
                        ]
                    }
                },
                "MethodResponses": []
            }
        },
        "ApiGatewayMethodApiNotificationsGetmessagesGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                    "Ref": "ApiGatewayResourceApiNotificationsGetmessages"
                },
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": false,
                "AuthorizationType": "NONE",
                "Integration": {
                    "IntegrationHttpMethod": "POST",
                    "Type": "AWS_PROXY",
                    "Uri": {
                        "Fn::Join": [
                            "",
                            [
                                "arn:",
                                {
                                    "Ref": "AWS::Partition"
                                },
                                ":apigateway:",
                                {
                                    "Ref": "AWS::Region"
                                },
                                ":lambda:path/2015-03-31/functions/",
                                {
                                    "Fn::GetAtt": [
                                        "GetMessageBoard1LambdaFunction",
                                        "Arn"
                                    ]
                                },
                                "/invocations"
                            ]
                        ]
                    }
                },
                "MethodResponses": []
            }
        },
        "ApiGatewayMethodApiNotificationsMessagesGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                    "Ref": "ApiGatewayResourceApiNotificationsMessages"
                },
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": false,
                "AuthorizationType": "NONE",
                "Integration": {
                    "IntegrationHttpMethod": "POST",
                    "Type": "AWS_PROXY",
                    "Uri": {
                        "Fn::Join": [
                            "",
                            [
                                "arn:",
                                {
                                    "Ref": "AWS::Partition"
                                },
                                ":apigateway:",
                                {
                                    "Ref": "AWS::Region"
                                },
                                ":lambda:path/2015-03-31/functions/",
                                {
                                    "Fn::GetAtt": [
                                        "GetMessageBoardLambdaFunction",
                                        "Arn"
                                    ]
                                },
                                "/invocations"
                            ]
                        ]
                    }
                },
                "MethodResponses": []
            }
        },
        "ApiGatewayMethodApiNotificationsMessagesPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                    "Ref": "ApiGatewayResourceApiNotificationsMessages"
                },
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": false,
                "AuthorizationType": "NONE",
                "Integration": {
                    "IntegrationHttpMethod": "POST",
                    "Type": "AWS_PROXY",
                    "Uri": {
                        "Fn::Join": [
                            "",
                            [
                                "arn:",
                                {
                                    "Ref": "AWS::Partition"
                                },
                                ":apigateway:",
                                {
                                    "Ref": "AWS::Region"
                                },
                                ":lambda:path/2015-03-31/functions/",
                                {
                                    "Fn::GetAtt": [
                                        "AddMessageBoardLambdaFunction",
                                        "Arn"
                                    ]
                                },
                                "/invocations"
                            ]
                        ]
                    }
                },
                "MethodResponses": []
            }
        },
        "ApiGatewayMethodApiNotificationsMessagesPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "HttpMethod": "PUT",
                "RequestParameters": {},
                "ResourceId": {
                    "Ref": "ApiGatewayResourceApiNotificationsMessages"
                },
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": false,
                "AuthorizationType": "NONE",
                "Integration": {
                    "IntegrationHttpMethod": "POST",
                    "Type": "AWS_PROXY",
                    "Uri": {
                        "Fn::Join": [
                            "",
                            [
                                "arn:",
                                {
                                    "Ref": "AWS::Partition"
                                },
                                ":apigateway:",
                                {
                                    "Ref": "AWS::Region"
                                },
                                ":lambda:path/2015-03-31/functions/",
                                {
                                    "Fn::GetAtt": [
                                        "UpdateMessageBoardLambdaFunction",
                                        "Arn"
                                    ]
                                },
                                "/invocations"
                            ]
                        ]
                    }
                },
                "MethodResponses": []
            }
        },
        "ApiGatewayMethodApiNotificationsGetgtnewsGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                    "Ref": "ApiGatewayResourceApiNotificationsGetgtnews"
                },
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": false,
                "AuthorizationType": "NONE",
                "Integration": {
                    "IntegrationHttpMethod": "POST",
                    "Type": "AWS_PROXY",
                    "Uri": {
                        "Fn::Join": [
                            "",
                            [
                                "arn:",
                                {
                                    "Ref": "AWS::Partition"
                                },
                                ":apigateway:",
                                {
                                    "Ref": "AWS::Region"
                                },
                                ":lambda:path/2015-03-31/functions/",
                                {
                                    "Fn::GetAtt": [
                                        "GetGtNews1LambdaFunction",
                                        "Arn"
                                    ]
                                },
                                "/invocations"
                            ]
                        ]
                    }
                },
                "MethodResponses": []
            }
        },
        "ApiGatewayMethodApiNotificationsGtnewsGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                    "Ref": "ApiGatewayResourceApiNotificationsGtnews"
                },
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": false,
                "AuthorizationType": "NONE",
                "Integration": {
                    "IntegrationHttpMethod": "POST",
                    "Type": "AWS_PROXY",
                    "Uri": {
                        "Fn::Join": [
                            "",
                            [
                                "arn:",
                                {
                                    "Ref": "AWS::Partition"
                                },
                                ":apigateway:",
                                {
                                    "Ref": "AWS::Region"
                                },
                                ":lambda:path/2015-03-31/functions/",
                                {
                                    "Fn::GetAtt": [
                                        "GetGtNewsLambdaFunction",
                                        "Arn"
                                    ]
                                },
                                "/invocations"
                            ]
                        ]
                    }
                },
                "MethodResponses": []
            }
        },
        "ApiGatewayMethodApiNotificationsGtnewsPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                    "Ref": "ApiGatewayResourceApiNotificationsGtnews"
                },
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": false,
                "AuthorizationType": "NONE",
                "Integration": {
                    "IntegrationHttpMethod": "POST",
                    "Type": "AWS_PROXY",
                    "Uri": {
                        "Fn::Join": [
                            "",
                            [
                                "arn:",
                                {
                                    "Ref": "AWS::Partition"
                                },
                                ":apigateway:",
                                {
                                    "Ref": "AWS::Region"
                                },
                                ":lambda:path/2015-03-31/functions/",
                                {
                                    "Fn::GetAtt": [
                                        "AddGtNewsLambdaFunction",
                                        "Arn"
                                    ]
                                },
                                "/invocations"
                            ]
                        ]
                    }
                },
                "MethodResponses": []
            }
        },
        "ApiGatewayMethodApiNotificationsGtnewsPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "HttpMethod": "PUT",
                "RequestParameters": {},
                "ResourceId": {
                    "Ref": "ApiGatewayResourceApiNotificationsGtnews"
                },
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": false,
                "AuthorizationType": "NONE",
                "Integration": {
                    "IntegrationHttpMethod": "POST",
                    "Type": "AWS_PROXY",
                    "Uri": {
                        "Fn::Join": [
                            "",
                            [
                                "arn:",
                                {
                                    "Ref": "AWS::Partition"
                                },
                                ":apigateway:",
                                {
                                    "Ref": "AWS::Region"
                                },
                                ":lambda:path/2015-03-31/functions/",
                                {
                                    "Fn::GetAtt": [
                                        "UpdateGtNewsLambdaFunction",
                                        "Arn"
                                    ]
                                },
                                "/invocations"
                            ]
                        ]
                    }
                },
                "MethodResponses": []
            }
        },
        "ApiGatewayMethodApiGetallroutesPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                    "Ref": "ApiGatewayResourceApiGetallroutes"
                },
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": false,
                "AuthorizationType": "NONE",
                "Integration": {
                    "IntegrationHttpMethod": "POST",
                    "Type": "AWS_PROXY",
                    "Uri": {
                        "Fn::Join": [
                            "",
                            [
                                "arn:",
                                {
                                    "Ref": "AWS::Partition"
                                },
                                ":apigateway:",
                                {
                                    "Ref": "AWS::Region"
                                },
                                ":lambda:path/2015-03-31/functions/",
                                {
                                    "Fn::GetAtt": [
                                        "AvailableRoutesLambdaFunction",
                                        "Arn"
                                    ]
                                },
                                "/invocations"
                            ]
                        ]
                    }
                },
                "MethodResponses": []
            }
        },
        "ApiGatewayMethodApiGetappropriatebusesPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                    "Ref": "ApiGatewayResourceApiGetappropriatebuses"
                },
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": false,
                "AuthorizationType": "NONE",
                "Integration": {
                    "IntegrationHttpMethod": "POST",
                    "Type": "AWS_PROXY",
                    "Uri": {
                        "Fn::Join": [
                            "",
                            [
                                "arn:",
                                {
                                    "Ref": "AWS::Partition"
                                },
                                ":apigateway:",
                                {
                                    "Ref": "AWS::Region"
                                },
                                ":lambda:path/2015-03-31/functions/",
                                {
                                    "Fn::GetAtt": [
                                        "AppropriateBusListLambdaFunction",
                                        "Arn"
                                    ]
                                },
                                "/invocations"
                            ]
                        ]
                    }
                },
                "MethodResponses": []
            }
        },
        "ApiGatewayMethodApiGetbusPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                    "Ref": "ApiGatewayResourceApiGetbus"
                },
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": false,
                "AuthorizationType": "NONE",
                "Integration": {
                    "IntegrationHttpMethod": "POST",
                    "Type": "AWS_PROXY",
                    "Uri": {
                        "Fn::Join": [
                            "",
                            [
                                "arn:",
                                {
                                    "Ref": "AWS::Partition"
                                },
                                ":apigateway:",
                                {
                                    "Ref": "AWS::Region"
                                },
                                ":lambda:path/2015-03-31/functions/",
                                {
                                    "Fn::GetAtt": [
                                        "GetSelectedBusLambdaFunction",
                                        "Arn"
                                    ]
                                },
                                "/invocations"
                            ]
                        ]
                    }
                },
                "MethodResponses": []
            }
        },
        "ApiGatewayMethodApiTrackingGetallbusesGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                    "Ref": "ApiGatewayResourceApiTrackingGetallbuses"
                },
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": false,
                "AuthorizationType": "NONE",
                "Integration": {
                    "IntegrationHttpMethod": "POST",
                    "Type": "AWS_PROXY",
                    "Uri": {
                        "Fn::Join": [
                            "",
                            [
                                "arn:",
                                {
                                    "Ref": "AWS::Partition"
                                },
                                ":apigateway:",
                                {
                                    "Ref": "AWS::Region"
                                },
                                ":lambda:path/2015-03-31/functions/",
                                {
                                    "Fn::GetAtt": [
                                        "GetAllBusesLambdaFunction",
                                        "Arn"
                                    ]
                                },
                                "/invocations"
                            ]
                        ]
                    }
                },
                "MethodResponses": []
            }
        },
        "ApiGatewayMethodApiTrackingGetdriverratingsGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                    "Ref": "ApiGatewayResourceApiTrackingGetdriverratings"
                },
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": false,
                "AuthorizationType": "NONE",
                "Integration": {
                    "IntegrationHttpMethod": "POST",
                    "Type": "AWS_PROXY",
                    "Uri": {
                        "Fn::Join": [
                            "",
                            [
                                "arn:",
                                {
                                    "Ref": "AWS::Partition"
                                },
                                ":apigateway:",
                                {
                                    "Ref": "AWS::Region"
                                },
                                ":lambda:path/2015-03-31/functions/",
                                {
                                    "Fn::GetAtt": [
                                        "GetDriverRatingsLambdaFunction",
                                        "Arn"
                                    ]
                                },
                                "/invocations"
                            ]
                        ]
                    }
                },
                "MethodResponses": []
            }
        },
        "ApiGatewayMethodApiAvailablebusesPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                    "Ref": "ApiGatewayResourceApiAvailablebuses"
                },
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": false,
                "AuthorizationType": "NONE",
                "Integration": {
                    "IntegrationHttpMethod": "POST",
                    "Type": "AWS_PROXY",
                    "Uri": {
                        "Fn::Join": [
                            "",
                            [
                                "arn:",
                                {
                                    "Ref": "AWS::Partition"
                                },
                                ":apigateway:",
                                {
                                    "Ref": "AWS::Region"
                                },
                                ":lambda:path/2015-03-31/functions/",
                                {
                                    "Fn::GetAtt": [
                                        "AvailableBusesLambdaFunction",
                                        "Arn"
                                    ]
                                },
                                "/invocations"
                            ]
                        ]
                    }
                },
                "MethodResponses": []
            }
        },
        "ApiGatewayMethodApiTrackingTrackingdetailsGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                    "Ref": "ApiGatewayResourceApiTrackingTrackingdetails"
                },
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": false,
                "AuthorizationType": "NONE",
                "Integration": {
                    "IntegrationHttpMethod": "POST",
                    "Type": "AWS_PROXY",
                    "Uri": {
                        "Fn::Join": [
                            "",
                            [
                                "arn:",
                                {
                                    "Ref": "AWS::Partition"
                                },
                                ":apigateway:",
                                {
                                    "Ref": "AWS::Region"
                                },
                                ":lambda:path/2015-03-31/functions/",
                                {
                                    "Fn::GetAtt": [
                                        "GetBusTrackingDetailsLambdaFunction",
                                        "Arn"
                                    ]
                                },
                                "/invocations"
                            ]
                        ]
                    }
                },
                "MethodResponses": []
            }
        },
        "ApiGatewayMethodApiTrackingBustrackingdetailGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                    "Ref": "ApiGatewayResourceApiTrackingBustrackingdetail"
                },
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": false,
                "AuthorizationType": "NONE",
                "Integration": {
                    "IntegrationHttpMethod": "POST",
                    "Type": "AWS_PROXY",
                    "Uri": {
                        "Fn::Join": [
                            "",
                            [
                                "arn:",
                                {
                                    "Ref": "AWS::Partition"
                                },
                                ":apigateway:",
                                {
                                    "Ref": "AWS::Region"
                                },
                                ":lambda:path/2015-03-31/functions/",
                                {
                                    "Fn::GetAtt": [
                                        "BusTrackingDetailLambdaFunction",
                                        "Arn"
                                    ]
                                },
                                "/invocations"
                            ]
                        ]
                    }
                },
                "MethodResponses": []
            }
        },
        "ApiGatewayMethodApiGeotabtrackingGetbuslocationtraceGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                    "Ref": "ApiGatewayResourceApiGeotabtrackingGetbuslocationtrace"
                },
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": false,
                "AuthorizationType": "NONE",
                "Integration": {
                    "IntegrationHttpMethod": "POST",
                    "Type": "AWS_PROXY",
                    "Uri": {
                        "Fn::Join": [
                            "",
                            [
                                "arn:",
                                {
                                    "Ref": "AWS::Partition"
                                },
                                ":apigateway:",
                                {
                                    "Ref": "AWS::Region"
                                },
                                ":lambda:path/2015-03-31/functions/",
                                {
                                    "Fn::GetAtt": [
                                        "GetBusLocationTraceGeoTabLambdaFunction",
                                        "Arn"
                                    ]
                                },
                                "/invocations"
                            ]
                        ]
                    }
                },
                "MethodResponses": []
            }
        },
        "ApiGatewayMethodApiGeotabtrackingGetbusexceptionsGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                    "Ref": "ApiGatewayResourceApiGeotabtrackingGetbusexceptions"
                },
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": false,
                "AuthorizationType": "NONE",
                "Integration": {
                    "IntegrationHttpMethod": "POST",
                    "Type": "AWS_PROXY",
                    "Uri": {
                        "Fn::Join": [
                            "",
                            [
                                "arn:",
                                {
                                    "Ref": "AWS::Partition"
                                },
                                ":apigateway:",
                                {
                                    "Ref": "AWS::Region"
                                },
                                ":lambda:path/2015-03-31/functions/",
                                {
                                    "Fn::GetAtt": [
                                        "GetBusExceptionsGeoTabLambdaFunction",
                                        "Arn"
                                    ]
                                },
                                "/invocations"
                            ]
                        ]
                    }
                },
                "MethodResponses": []
            }
        },
        "ApiGatewayMethodApiGeotabtrackingBustrackingdetailGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                    "Ref": "ApiGatewayResourceApiGeotabtrackingBustrackingdetail"
                },
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": false,
                "AuthorizationType": "NONE",
                "Integration": {
                    "IntegrationHttpMethod": "POST",
                    "Type": "AWS_PROXY",
                    "Uri": {
                        "Fn::Join": [
                            "",
                            [
                                "arn:",
                                {
                                    "Ref": "AWS::Partition"
                                },
                                ":apigateway:",
                                {
                                    "Ref": "AWS::Region"
                                },
                                ":lambda:path/2015-03-31/functions/",
                                {
                                    "Fn::GetAtt": [
                                        "GetbusTrackingDetailGeoTabLambdaFunction",
                                        "Arn"
                                    ]
                                },
                                "/invocations"
                            ]
                        ]
                    }
                },
                "MethodResponses": []
            }
        },
        "ApiGatewayMethodApiPilabTripdataprocessGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                    "Ref": "ApiGatewayResourceApiPilabTripdataprocess"
                },
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": false,
                "AuthorizationType": "NONE",
                "Integration": {
                    "IntegrationHttpMethod": "POST",
                    "Type": "AWS_PROXY",
                    "Uri": {
                        "Fn::Join": [
                            "",
                            [
                                "arn:",
                                {
                                    "Ref": "AWS::Partition"
                                },
                                ":apigateway:",
                                {
                                    "Ref": "AWS::Region"
                                },
                                ":lambda:path/2015-03-31/functions/",
                                {
                                    "Fn::GetAtt": [
                                        "PiLabTripDataProcessAllAPILambdaFunction",
                                        "Arn"
                                    ]
                                },
                                "/invocations"
                            ]
                        ]
                    }
                },
                "MethodResponses": []
            }
        },
        "ApiGatewayMethodApiPilabTripdataprocessPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                    "Ref": "ApiGatewayResourceApiPilabTripdataprocess"
                },
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": false,
                "AuthorizationType": "NONE",
                "Integration": {
                    "IntegrationHttpMethod": "POST",
                    "Type": "AWS_PROXY",
                    "Uri": {
                        "Fn::Join": [
                            "",
                            [
                                "arn:",
                                {
                                    "Ref": "AWS::Partition"
                                },
                                ":apigateway:",
                                {
                                    "Ref": "AWS::Region"
                                },
                                ":lambda:path/2015-03-31/functions/",
                                {
                                    "Fn::GetAtt": [
                                        "PiLabTripDataProcessAPILambdaFunction",
                                        "Arn"
                                    ]
                                },
                                "/invocations"
                            ]
                        ]
                    }
                },
                "MethodResponses": []
            }
        },
        "ApiGatewayMethodApiTestGeotabPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                    "Ref": "ApiGatewayResourceApiTestGeotab"
                },
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": false,
                "AuthorizationType": "NONE",
                "Integration": {
                    "IntegrationHttpMethod": "POST",
                    "Type": "AWS_PROXY",
                    "Uri": {
                        "Fn::Join": [
                            "",
                            [
                                "arn:",
                                {
                                    "Ref": "AWS::Partition"
                                },
                                ":apigateway:",
                                {
                                    "Ref": "AWS::Region"
                                },
                                ":lambda:path/2015-03-31/functions/",
                                {
                                    "Fn::GetAtt": [
                                        "TestUnderscoreGeoTabTripDataLambdaFunction",
                                        "Arn"
                                    ]
                                },
                                "/invocations"
                            ]
                        ]
                    }
                },
                "MethodResponses": []
            }
        },
        "ApiGatewayMethodApiTestPilabPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                    "Ref": "ApiGatewayResourceApiTestPilab"
                },
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": false,
                "AuthorizationType": "NONE",
                "Integration": {
                    "IntegrationHttpMethod": "POST",
                    "Type": "AWS_PROXY",
                    "Uri": {
                        "Fn::Join": [
                            "",
                            [
                                "arn:",
                                {
                                    "Ref": "AWS::Partition"
                                },
                                ":apigateway:",
                                {
                                    "Ref": "AWS::Region"
                                },
                                ":lambda:path/2015-03-31/functions/",
                                {
                                    "Fn::GetAtt": [
                                        "TestUnderscoreSNSUnderscoreDynamoDbLambdaLambdaFunction",
                                        "Arn"
                                    ]
                                },
                                "/invocations"
                            ]
                        ]
                    }
                },
                "MethodResponses": []
            }
        },
        "ApiGatewayMethodApiTestPilabtripdataprocessGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                    "Ref": "ApiGatewayResourceApiTestPilabtripdataprocess"
                },
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": false,
                "AuthorizationType": "NONE",
                "Integration": {
                    "IntegrationHttpMethod": "POST",
                    "Type": "AWS_PROXY",
                    "Uri": {
                        "Fn::Join": [
                            "",
                            [
                                "arn:",
                                {
                                    "Ref": "AWS::Partition"
                                },
                                ":apigateway:",
                                {
                                    "Ref": "AWS::Region"
                                },
                                ":lambda:path/2015-03-31/functions/",
                                {
                                    "Fn::GetAtt": [
                                        "TestUnderscorePiLabTripDataProcessAllLambdaFunction",
                                        "Arn"
                                    ]
                                },
                                "/invocations"
                            ]
                        ]
                    }
                },
                "MethodResponses": []
            }
        },
        "ApiGatewayMethodApiTestTripdataprocessPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                    "Ref": "ApiGatewayResourceApiTestTripdataprocess"
                },
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": false,
                "AuthorizationType": "NONE",
                "Integration": {
                    "IntegrationHttpMethod": "POST",
                    "Type": "AWS_PROXY",
                    "Uri": {
                        "Fn::Join": [
                            "",
                            [
                                "arn:",
                                {
                                    "Ref": "AWS::Partition"
                                },
                                ":apigateway:",
                                {
                                    "Ref": "AWS::Region"
                                },
                                ":lambda:path/2015-03-31/functions/",
                                {
                                    "Fn::GetAtt": [
                                        "TestUnderscorePiLabTripDataProcessLambdaFunction",
                                        "Arn"
                                    ]
                                },
                                "/invocations"
                            ]
                        ]
                    }
                },
                "MethodResponses": []
            }
        },
        "ApiGatewayMethodApiTestGeofencingexceptionGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                    "Ref": "ApiGatewayResourceApiTestGeofencingexception"
                },
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": false,
                "AuthorizationType": "NONE",
                "Integration": {
                    "IntegrationHttpMethod": "POST",
                    "Type": "AWS_PROXY",
                    "Uri": {
                        "Fn::Join": [
                            "",
                            [
                                "arn:",
                                {
                                    "Ref": "AWS::Partition"
                                },
                                ":apigateway:",
                                {
                                    "Ref": "AWS::Region"
                                },
                                ":lambda:path/2015-03-31/functions/",
                                {
                                    "Fn::GetAtt": [
                                        "TestUnderscorePiLabTripGeofencingExceptionLambdaFunction",
                                        "Arn"
                                    ]
                                },
                                "/invocations"
                            ]
                        ]
                    }
                },
                "MethodResponses": []
            }
        },
        "ApiGatewayMethodApiTestExceptioneventGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                    "Ref": "ApiGatewayResourceApiTestExceptionevent"
                },
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": false,
                "AuthorizationType": "NONE",
                "Integration": {
                    "IntegrationHttpMethod": "POST",
                    "Type": "AWS_PROXY",
                    "Uri": {
                        "Fn::Join": [
                            "",
                            [
                                "arn:",
                                {
                                    "Ref": "AWS::Partition"
                                },
                                ":apigateway:",
                                {
                                    "Ref": "AWS::Region"
                                },
                                ":lambda:path/2015-03-31/functions/",
                                {
                                    "Fn::GetAtt": [
                                        "TestUnderscorePiLabTripExceptionEventLambdaFunction",
                                        "Arn"
                                    ]
                                },
                                "/invocations"
                            ]
                        ]
                    }
                },
                "MethodResponses": []
            }
        },
        "ApiGatewayDeployment1659083756342": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                },
                "StageName": "dev"
            },
            "DependsOn": [
                "ApiGatewayMethodApiAdminLoginOptions",
                "ApiGatewayMethodApiAdminSignDashupOptions",
                "ApiGatewayMethodApiDeviceOptions",
                "ApiGatewayMethodApiUserUsergetstaticdetailsOptions",
                "ApiGatewayMethodApiTrackingGetallstaticdetailsOptions",
                "ApiGatewayMethodApiTrackingGetallstaticdetailsbyuserOptions",
                "ApiGatewayMethodApiTrackingUpdatestaticdetailsbyuserOptions",
                "ApiGatewayMethodApiContactOptions",
                "ApiGatewayMethodApiNotificationsGetallOptions",
                "ApiGatewayMethodApiNotificationsOptions",
                "ApiGatewayMethodApiNotificationsGetmessagesOptions",
                "ApiGatewayMethodApiNotificationsMessagesOptions",
                "ApiGatewayMethodApiNotificationsGetgtnewsOptions",
                "ApiGatewayMethodApiNotificationsGtnewsOptions",
                "ApiGatewayMethodApiGetallroutesOptions",
                "ApiGatewayMethodApiGetappropriatebusesOptions",
                "ApiGatewayMethodApiGetbusOptions",
                "ApiGatewayMethodApiTrackingGetallbusesOptions",
                "ApiGatewayMethodApiTrackingGetdriverratingsOptions",
                "ApiGatewayMethodApiAvailablebusesOptions",
                "ApiGatewayMethodApiTrackingTrackingdetailsOptions",
                "ApiGatewayMethodApiTrackingBustrackingdetailOptions",
                "ApiGatewayMethodApiGeotabtrackingGetbuslocationtraceOptions",
                "ApiGatewayMethodApiGeotabtrackingGetbusexceptionsOptions",
                "ApiGatewayMethodApiGeotabtrackingBustrackingdetailOptions",
                "ApiGatewayMethodApiPilabTripdataprocessOptions",
                "ApiGatewayMethodApiTestGeotabOptions",
                "ApiGatewayMethodApiTestPilabOptions",
                "ApiGatewayMethodApiTestPilabtripdataprocessOptions",
                "ApiGatewayMethodApiTestTripdataprocessOptions",
                "ApiGatewayMethodApiTestGeofencingexceptionOptions",
                "ApiGatewayMethodApiTestExceptioneventOptions",
                "ApiGatewayMethodApiGetroutesGet",
                "ApiGatewayMethodApiAdminLoginPost",
                "ApiGatewayMethodApiAdminSignDashupPost",
                "ApiGatewayMethodApiDeviceGet",
                "ApiGatewayMethodApiDevicePost",
                "ApiGatewayMethodApiDevicePut",
                "ApiGatewayMethodApiUserUsergetstaticdetailsGet",
                "ApiGatewayMethodApiTrackingGetallstaticdetailsGet",
                "ApiGatewayMethodApiTrackingGetallstaticdetailsbyuserGet",
                "ApiGatewayMethodApiTrackingUpdatestaticdetailsbyuserPut",
                "ApiGatewayMethodApiContactGet",
                "ApiGatewayMethodApiContactPost",
                "ApiGatewayMethodApiContactPut",
                "ApiGatewayMethodApiNotificationsGetallGet",
                "ApiGatewayMethodApiNotificationsGet",
                "ApiGatewayMethodApiNotificationsPost",
                "ApiGatewayMethodApiNotificationsPut",
                "ApiGatewayMethodApiNotificationsGetmessagesGet",
                "ApiGatewayMethodApiNotificationsMessagesGet",
                "ApiGatewayMethodApiNotificationsMessagesPost",
                "ApiGatewayMethodApiNotificationsMessagesPut",
                "ApiGatewayMethodApiNotificationsGetgtnewsGet",
                "ApiGatewayMethodApiNotificationsGtnewsGet",
                "ApiGatewayMethodApiNotificationsGtnewsPost",
                "ApiGatewayMethodApiNotificationsGtnewsPut",
                "ApiGatewayMethodApiGetallroutesPost",
                "ApiGatewayMethodApiGetappropriatebusesPost",
                "ApiGatewayMethodApiGetbusPost",
                "ApiGatewayMethodApiTrackingGetallbusesGet",
                "ApiGatewayMethodApiTrackingGetdriverratingsGet",
                "ApiGatewayMethodApiAvailablebusesPost",
                "ApiGatewayMethodApiTrackingTrackingdetailsGet",
                "ApiGatewayMethodApiTrackingBustrackingdetailGet",
                "ApiGatewayMethodApiGeotabtrackingGetbuslocationtraceGet",
                "ApiGatewayMethodApiGeotabtrackingGetbusexceptionsGet",
                "ApiGatewayMethodApiGeotabtrackingBustrackingdetailGet",
                "ApiGatewayMethodApiPilabTripdataprocessGet",
                "ApiGatewayMethodApiPilabTripdataprocessPost",
                "ApiGatewayMethodApiTestGeotabPost",
                "ApiGatewayMethodApiTestPilabPost",
                "ApiGatewayMethodApiTestPilabtripdataprocessGet",
                "ApiGatewayMethodApiTestTripdataprocessPost",
                "ApiGatewayMethodApiTestGeofencingexceptionGet",
                "ApiGatewayMethodApiTestExceptioneventGet"
            ]
        },
        "DetermineRouteLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": {
                    "Fn::GetAtt": [
                        "DetermineRouteLambdaFunction",
                        "Arn"
                    ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                    "Fn::Join": [
                        "",
                        [
                            "arn:",
                            {
                                "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                                "Ref": "AWS::Region"
                            },
                            ":",
                            {
                                "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                                "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                        ]
                    ]
                }
            }
        },
        "AdminLoginLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": {
                    "Fn::GetAtt": [
                        "AdminLoginLambdaFunction",
                        "Arn"
                    ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                    "Fn::Join": [
                        "",
                        [
                            "arn:",
                            {
                                "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                                "Ref": "AWS::Region"
                            },
                            ":",
                            {
                                "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                                "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                        ]
                    ]
                }
            }
        },
        "AdminSignUpLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": {
                    "Fn::GetAtt": [
                        "AdminSignUpLambdaFunction",
                        "Arn"
                    ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                    "Fn::Join": [
                        "",
                        [
                            "arn:",
                            {
                                "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                                "Ref": "AWS::Region"
                            },
                            ":",
                            {
                                "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                                "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                        ]
                    ]
                }
            }
        },
        "GetDeviceLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": {
                    "Fn::GetAtt": [
                        "GetDeviceLambdaFunction",
                        "Arn"
                    ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                    "Fn::Join": [
                        "",
                        [
                            "arn:",
                            {
                                "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                                "Ref": "AWS::Region"
                            },
                            ":",
                            {
                                "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                                "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                        ]
                    ]
                }
            }
        },
        "AddDeviceLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": {
                    "Fn::GetAtt": [
                        "AddDeviceLambdaFunction",
                        "Arn"
                    ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                    "Fn::Join": [
                        "",
                        [
                            "arn:",
                            {
                                "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                                "Ref": "AWS::Region"
                            },
                            ":",
                            {
                                "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                                "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                        ]
                    ]
                }
            }
        },
        "UpdateDeviceLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": {
                    "Fn::GetAtt": [
                        "UpdateDeviceLambdaFunction",
                        "Arn"
                    ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                    "Fn::Join": [
                        "",
                        [
                            "arn:",
                            {
                                "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                                "Ref": "AWS::Region"
                            },
                            ":",
                            {
                                "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                                "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                        ]
                    ]
                }
            }
        },
        "UserStaticDetailsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": {
                    "Fn::GetAtt": [
                        "UserStaticDetailsLambdaFunction",
                        "Arn"
                    ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                    "Fn::Join": [
                        "",
                        [
                            "arn:",
                            {
                                "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                                "Ref": "AWS::Region"
                            },
                            ":",
                            {
                                "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                                "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                        ]
                    ]
                }
            }
        },
        "GetAllStaticDetailsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": {
                    "Fn::GetAtt": [
                        "GetAllStaticDetailsLambdaFunction",
                        "Arn"
                    ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                    "Fn::Join": [
                        "",
                        [
                            "arn:",
                            {
                                "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                                "Ref": "AWS::Region"
                            },
                            ":",
                            {
                                "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                                "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                        ]
                    ]
                }
            }
        },
        "GetAllStaticDetailsByUserLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": {
                    "Fn::GetAtt": [
                        "GetAllStaticDetailsByUserLambdaFunction",
                        "Arn"
                    ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                    "Fn::Join": [
                        "",
                        [
                            "arn:",
                            {
                                "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                                "Ref": "AWS::Region"
                            },
                            ":",
                            {
                                "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                                "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                        ]
                    ]
                }
            }
        },
        "UpdateStaticDetailsByUserLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": {
                    "Fn::GetAtt": [
                        "UpdateStaticDetailsByUserLambdaFunction",
                        "Arn"
                    ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                    "Fn::Join": [
                        "",
                        [
                            "arn:",
                            {
                                "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                                "Ref": "AWS::Region"
                            },
                            ":",
                            {
                                "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                                "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                        ]
                    ]
                }
            }
        },
        "GetContactLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": {
                    "Fn::GetAtt": [
                        "GetContactLambdaFunction",
                        "Arn"
                    ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                    "Fn::Join": [
                        "",
                        [
                            "arn:",
                            {
                                "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                                "Ref": "AWS::Region"
                            },
                            ":",
                            {
                                "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                                "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                        ]
                    ]
                }
            }
        },
        "AddContactLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": {
                    "Fn::GetAtt": [
                        "AddContactLambdaFunction",
                        "Arn"
                    ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                    "Fn::Join": [
                        "",
                        [
                            "arn:",
                            {
                                "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                                "Ref": "AWS::Region"
                            },
                            ":",
                            {
                                "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                                "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                        ]
                    ]
                }
            }
        },
        "UpdateContactLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": {
                    "Fn::GetAtt": [
                        "UpdateContactLambdaFunction",
                        "Arn"
                    ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                    "Fn::Join": [
                        "",
                        [
                            "arn:",
                            {
                                "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                                "Ref": "AWS::Region"
                            },
                            ":",
                            {
                                "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                                "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                        ]
                    ]
                }
            }
        },
        "GetNotifications1LambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": {
                    "Fn::GetAtt": [
                        "GetNotifications1LambdaFunction",
                        "Arn"
                    ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                    "Fn::Join": [
                        "",
                        [
                            "arn:",
                            {
                                "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                                "Ref": "AWS::Region"
                            },
                            ":",
                            {
                                "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                                "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                        ]
                    ]
                }
            }
        },
        "GetNotificationsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": {
                    "Fn::GetAtt": [
                        "GetNotificationsLambdaFunction",
                        "Arn"
                    ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                    "Fn::Join": [
                        "",
                        [
                            "arn:",
                            {
                                "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                                "Ref": "AWS::Region"
                            },
                            ":",
                            {
                                "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                                "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                        ]
                    ]
                }
            }
        },
        "AddNotificationsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": {
                    "Fn::GetAtt": [
                        "AddNotificationsLambdaFunction",
                        "Arn"
                    ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                    "Fn::Join": [
                        "",
                        [
                            "arn:",
                            {
                                "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                                "Ref": "AWS::Region"
                            },
                            ":",
                            {
                                "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                                "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                        ]
                    ]
                }
            }
        },
        "UpdateNotificationsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": {
                    "Fn::GetAtt": [
                        "UpdateNotificationsLambdaFunction",
                        "Arn"
                    ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                    "Fn::Join": [
                        "",
                        [
                            "arn:",
                            {
                                "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                                "Ref": "AWS::Region"
                            },
                            ":",
                            {
                                "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                                "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                        ]
                    ]
                }
            }
        },
        "GetMessageBoard1LambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": {
                    "Fn::GetAtt": [
                        "GetMessageBoard1LambdaFunction",
                        "Arn"
                    ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                    "Fn::Join": [
                        "",
                        [
                            "arn:",
                            {
                                "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                                "Ref": "AWS::Region"
                            },
                            ":",
                            {
                                "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                                "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                        ]
                    ]
                }
            }
        },
        "GetMessageBoardLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": {
                    "Fn::GetAtt": [
                        "GetMessageBoardLambdaFunction",
                        "Arn"
                    ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                    "Fn::Join": [
                        "",
                        [
                            "arn:",
                            {
                                "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                                "Ref": "AWS::Region"
                            },
                            ":",
                            {
                                "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                                "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                        ]
                    ]
                }
            }
        },
        "AddMessageBoardLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": {
                    "Fn::GetAtt": [
                        "AddMessageBoardLambdaFunction",
                        "Arn"
                    ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                    "Fn::Join": [
                        "",
                        [
                            "arn:",
                            {
                                "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                                "Ref": "AWS::Region"
                            },
                            ":",
                            {
                                "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                                "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                        ]
                    ]
                }
            }
        },
        "UpdateMessageBoardLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": {
                    "Fn::GetAtt": [
                        "UpdateMessageBoardLambdaFunction",
                        "Arn"
                    ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                    "Fn::Join": [
                        "",
                        [
                            "arn:",
                            {
                                "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                                "Ref": "AWS::Region"
                            },
                            ":",
                            {
                                "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                                "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                        ]
                    ]
                }
            }
        },
        "GetGtNews1LambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": {
                    "Fn::GetAtt": [
                        "GetGtNews1LambdaFunction",
                        "Arn"
                    ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                    "Fn::Join": [
                        "",
                        [
                            "arn:",
                            {
                                "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                                "Ref": "AWS::Region"
                            },
                            ":",
                            {
                                "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                                "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                        ]
                    ]
                }
            }
        },
        "GetGtNewsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": {
                    "Fn::GetAtt": [
                        "GetGtNewsLambdaFunction",
                        "Arn"
                    ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                    "Fn::Join": [
                        "",
                        [
                            "arn:",
                            {
                                "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                                "Ref": "AWS::Region"
                            },
                            ":",
                            {
                                "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                                "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                        ]
                    ]
                }
            }
        },
        "AddGtNewsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": {
                    "Fn::GetAtt": [
                        "AddGtNewsLambdaFunction",
                        "Arn"
                    ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                    "Fn::Join": [
                        "",
                        [
                            "arn:",
                            {
                                "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                                "Ref": "AWS::Region"
                            },
                            ":",
                            {
                                "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                                "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                        ]
                    ]
                }
            }
        },
        "UpdateGtNewsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": {
                    "Fn::GetAtt": [
                        "UpdateGtNewsLambdaFunction",
                        "Arn"
                    ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                    "Fn::Join": [
                        "",
                        [
                            "arn:",
                            {
                                "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                                "Ref": "AWS::Region"
                            },
                            ":",
                            {
                                "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                                "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                        ]
                    ]
                }
            }
        },
        "AvailableRoutesLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": {
                    "Fn::GetAtt": [
                        "AvailableRoutesLambdaFunction",
                        "Arn"
                    ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                    "Fn::Join": [
                        "",
                        [
                            "arn:",
                            {
                                "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                                "Ref": "AWS::Region"
                            },
                            ":",
                            {
                                "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                                "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                        ]
                    ]
                }
            }
        },
        "AppropriateBusListLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": {
                    "Fn::GetAtt": [
                        "AppropriateBusListLambdaFunction",
                        "Arn"
                    ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                    "Fn::Join": [
                        "",
                        [
                            "arn:",
                            {
                                "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                                "Ref": "AWS::Region"
                            },
                            ":",
                            {
                                "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                                "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                        ]
                    ]
                }
            }
        },
        "GetSelectedBusLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": {
                    "Fn::GetAtt": [
                        "GetSelectedBusLambdaFunction",
                        "Arn"
                    ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                    "Fn::Join": [
                        "",
                        [
                            "arn:",
                            {
                                "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                                "Ref": "AWS::Region"
                            },
                            ":",
                            {
                                "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                                "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                        ]
                    ]
                }
            }
        },
        "GetAllBusesLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": {
                    "Fn::GetAtt": [
                        "GetAllBusesLambdaFunction",
                        "Arn"
                    ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                    "Fn::Join": [
                        "",
                        [
                            "arn:",
                            {
                                "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                                "Ref": "AWS::Region"
                            },
                            ":",
                            {
                                "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                                "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                        ]
                    ]
                }
            }
        },
        "GetDriverRatingsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": {
                    "Fn::GetAtt": [
                        "GetDriverRatingsLambdaFunction",
                        "Arn"
                    ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                    "Fn::Join": [
                        "",
                        [
                            "arn:",
                            {
                                "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                                "Ref": "AWS::Region"
                            },
                            ":",
                            {
                                "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                                "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                        ]
                    ]
                }
            }
        },
        "AvailableBusesLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": {
                    "Fn::GetAtt": [
                        "AvailableBusesLambdaFunction",
                        "Arn"
                    ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                    "Fn::Join": [
                        "",
                        [
                            "arn:",
                            {
                                "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                                "Ref": "AWS::Region"
                            },
                            ":",
                            {
                                "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                                "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                        ]
                    ]
                }
            }
        },
        "GetBusTrackingDetailsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": {
                    "Fn::GetAtt": [
                        "GetBusTrackingDetailsLambdaFunction",
                        "Arn"
                    ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                    "Fn::Join": [
                        "",
                        [
                            "arn:",
                            {
                                "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                                "Ref": "AWS::Region"
                            },
                            ":",
                            {
                                "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                                "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                        ]
                    ]
                }
            }
        },
        "BusTrackingDetailLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": {
                    "Fn::GetAtt": [
                        "BusTrackingDetailLambdaFunction",
                        "Arn"
                    ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                    "Fn::Join": [
                        "",
                        [
                            "arn:",
                            {
                                "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                                "Ref": "AWS::Region"
                            },
                            ":",
                            {
                                "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                                "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                        ]
                    ]
                }
            }
        },
        "GetBusLocationTraceGeoTabLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": {
                    "Fn::GetAtt": [
                        "GetBusLocationTraceGeoTabLambdaFunction",
                        "Arn"
                    ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                    "Fn::Join": [
                        "",
                        [
                            "arn:",
                            {
                                "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                                "Ref": "AWS::Region"
                            },
                            ":",
                            {
                                "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                                "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                        ]
                    ]
                }
            }
        },
        "GetBusExceptionsGeoTabLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": {
                    "Fn::GetAtt": [
                        "GetBusExceptionsGeoTabLambdaFunction",
                        "Arn"
                    ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                    "Fn::Join": [
                        "",
                        [
                            "arn:",
                            {
                                "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                                "Ref": "AWS::Region"
                            },
                            ":",
                            {
                                "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                                "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                        ]
                    ]
                }
            }
        },
        "GetbusTrackingDetailGeoTabLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": {
                    "Fn::GetAtt": [
                        "GetbusTrackingDetailGeoTabLambdaFunction",
                        "Arn"
                    ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                    "Fn::Join": [
                        "",
                        [
                            "arn:",
                            {
                                "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                                "Ref": "AWS::Region"
                            },
                            ":",
                            {
                                "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                                "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                        ]
                    ]
                }
            }
        },
        "PiLabTripDataProcessAllAPILambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": {
                    "Fn::GetAtt": [
                        "PiLabTripDataProcessAllAPILambdaFunction",
                        "Arn"
                    ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                    "Fn::Join": [
                        "",
                        [
                            "arn:",
                            {
                                "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                                "Ref": "AWS::Region"
                            },
                            ":",
                            {
                                "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                                "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                        ]
                    ]
                }
            }
        },
        "PiLabTripDataProcessAPILambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": {
                    "Fn::GetAtt": [
                        "PiLabTripDataProcessAPILambdaFunction",
                        "Arn"
                    ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                    "Fn::Join": [
                        "",
                        [
                            "arn:",
                            {
                                "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                                "Ref": "AWS::Region"
                            },
                            ":",
                            {
                                "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                                "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                        ]
                    ]
                }
            }
        },
        "TestUnderscoreGeoTabTripDataLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": {
                    "Fn::GetAtt": [
                        "TestUnderscoreGeoTabTripDataLambdaFunction",
                        "Arn"
                    ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                    "Fn::Join": [
                        "",
                        [
                            "arn:",
                            {
                                "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                                "Ref": "AWS::Region"
                            },
                            ":",
                            {
                                "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                                "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                        ]
                    ]
                }
            }
        },
        "TestUnderscoreSNSUnderscoreDynamoDbLambdaLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": {
                    "Fn::GetAtt": [
                        "TestUnderscoreSNSUnderscoreDynamoDbLambdaLambdaFunction",
                        "Arn"
                    ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                    "Fn::Join": [
                        "",
                        [
                            "arn:",
                            {
                                "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                                "Ref": "AWS::Region"
                            },
                            ":",
                            {
                                "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                                "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                        ]
                    ]
                }
            }
        },
        "TestUnderscorePiLabTripDataProcessAllLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": {
                    "Fn::GetAtt": [
                        "TestUnderscorePiLabTripDataProcessAllLambdaFunction",
                        "Arn"
                    ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                    "Fn::Join": [
                        "",
                        [
                            "arn:",
                            {
                                "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                                "Ref": "AWS::Region"
                            },
                            ":",
                            {
                                "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                                "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                        ]
                    ]
                }
            }
        },
        "TestUnderscorePiLabTripDataProcessLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": {
                    "Fn::GetAtt": [
                        "TestUnderscorePiLabTripDataProcessLambdaFunction",
                        "Arn"
                    ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                    "Fn::Join": [
                        "",
                        [
                            "arn:",
                            {
                                "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                                "Ref": "AWS::Region"
                            },
                            ":",
                            {
                                "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                                "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                        ]
                    ]
                }
            }
        },
        "TestUnderscorePiLabTripGeofencingExceptionLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": {
                    "Fn::GetAtt": [
                        "TestUnderscorePiLabTripGeofencingExceptionLambdaFunction",
                        "Arn"
                    ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                    "Fn::Join": [
                        "",
                        [
                            "arn:",
                            {
                                "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                                "Ref": "AWS::Region"
                            },
                            ":",
                            {
                                "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                                "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                        ]
                    ]
                }
            }
        },
        "TestUnderscorePiLabTripExceptionEventLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": {
                    "Fn::GetAtt": [
                        "TestUnderscorePiLabTripExceptionEventLambdaFunction",
                        "Arn"
                    ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                    "Fn::Join": [
                        "",
                        [
                            "arn:",
                            {
                                "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                                "Ref": "AWS::Region"
                            },
                            ":",
                            {
                                "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                                "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                        ]
                    ]
                }
            }
        },
        "SnsFirehoseLambdaTriggeredSnsSubscriptionPilabsat473913856290": {
            "Type": "AWS::SNS::Subscription",
            "Properties": {
                "TopicArn": "arn:aws:sns:af-south-1:473913856290:pilabs-at-473913856290",
                "Protocol": "lambda",
                "Endpoint": {
                    "Fn::GetAtt": [
                        "SnsFirehoseLambdaTriggeredLambdaFunction",
                        "Arn"
                    ]
                }
            }
        },
        "SnsFirehoseLambdaTriggeredLambdaPermissionPilabsat473913856290SNS": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": {
                    "Fn::GetAtt": [
                        "SnsFirehoseLambdaTriggeredLambdaFunction",
                        "Arn"
                    ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "sns.amazonaws.com",
                "SourceArn": "arn:aws:sns:af-south-1:473913856290:pilabs-at-473913856290"
            }
        },
        "SnsDynamoDbLambdaTriggeredSnsSubscriptionPilabstripsat473913856290": {
            "Type": "AWS::SNS::Subscription",
            "Properties": {
                "TopicArn": "arn:aws:sns:af-south-1:473913856290:pilabs-trips-at-473913856290",
                "Protocol": "lambda",
                "Endpoint": {
                    "Fn::GetAtt": [
                        "SnsDynamoDbLambdaTriggeredLambdaFunction",
                        "Arn"
                    ]
                }
            }
        },
        "SnsDynamoDbLambdaTriggeredLambdaPermissionPilabstripsat473913856290SNS": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": {
                    "Fn::GetAtt": [
                        "SnsDynamoDbLambdaTriggeredLambdaFunction",
                        "Arn"
                    ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "sns.amazonaws.com",
                "SourceArn": "arn:aws:sns:af-south-1:473913856290:pilabs-trips-at-473913856290"
            }
        }
    },
    "Outputs": {
        "ServerlessDeploymentBucketName": {
            "Value": {
                "Ref": "ServerlessDeploymentBucket"
            }
        },
        "DetermineRouteLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
                "Ref": "DetermineRouteLambdaVersion59gJcg6ewnU4m6PFhczPDhtDdl3E6krmAVFh32LeoFA"
            }
        },
        "AdminLoginLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
                "Ref": "AdminLoginLambdaVersionPNYrUOSulyAhsclfSpIFEtIkKyT5YYNG7wYX7IBAZ0"
            }
        },
        "AdminSignUpLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
                "Ref": "AdminSignUpLambdaVersion1wMNrpyPta5FBkg5YtoOnCEIJz4l3pjmLkqEUNboyw"
            }
        },
        "GetDeviceLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
                "Ref": "GetDeviceLambdaVersionYCEVb7ZXKfy6L38kLXABN3eYlDyaiklsfLavRIGgj0"
            }
        },
        "AddDeviceLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
                "Ref": "AddDeviceLambdaVersionEeTEp9XZzEm0XJIwu0OiVkcMihI7FrhOZA71RL4qyo"
            }
        },
        "UpdateDeviceLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
                "Ref": "UpdateDeviceLambdaVersionjOaTbjMZDFFTbXISbgKP72nPf9x1o5fNY1jSeghtFsA"
            }
        },
        "UserStaticDetailsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
                "Ref": "UserStaticDetailsLambdaVersionBwg8Iakipgov83XsKbF9iE0xv6NAJ8fpG1as7Y6UAFY"
            }
        },
        "GetAllStaticDetailsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
                "Ref": "GetAllStaticDetailsLambdaVersionnoPU2FY9c16JL1ewVNe39RzmaSTFizZtYFxfq0am7g"
            }
        },
        "GetAllStaticDetailsByUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
                "Ref": "GetAllStaticDetailsByUserLambdaVersionlJ6WteYyierUMGfHDCuz2pDmoWxtn04zHpvy7sORfhc"
            }
        },
        "UpdateStaticDetailsByUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
                "Ref": "UpdateStaticDetailsByUserLambdaVersionlutzsojxbe3NPNarpsDyE1n1cevxGiCM2mVJHflzTEk"
            }
        },
        "GetContactLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
                "Ref": "GetContactLambdaVersionlkqNQ8rPfKSN4Zclnr9nKv1P7tCUgd8ClAyrcelC5U"
            }
        },
        "AddContactLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
                "Ref": "AddContactLambdaVersionnFFtKuqGzQrlJcD37hBnsDFWaOJ9oYZITR6zzLoRyNg"
            }
        },
        "UpdateContactLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
                "Ref": "UpdateContactLambdaVersionpUBmhL1BjgTsSjbZmKwJkcOpuZMiiLi1YoMyPV4npQ"
            }
        },
        "GetNotifications1LambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
                "Ref": "GetNotifications1LambdaVersionrAOrXTfaRAEqvdDuYjPDdhGdvazPYu4bFf6Cx0C5Xuk"
            }
        },
        "GetNotificationsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
                "Ref": "GetNotificationsLambdaVersion8teZXk0XGYtIrnp4957TtHjxXYM2tsMf34fTLtZe1E"
            }
        },
        "AddNotificationsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
                "Ref": "AddNotificationsLambdaVersionrIshOfBx8qmINp3ivndEprRTp8L9VCwXlpSAoDSYNOI"
            }
        },
        "UpdateNotificationsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
                "Ref": "UpdateNotificationsLambdaVersionDc4WJFZAXQNQZobp8Yi2m4Iy1Qo12HD139QSemKDuvQ"
            }
        },
        "GetMessageBoard1LambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
                "Ref": "GetMessageBoard1LambdaVersion5395PXQbHzO3doxS9Q3ZTuY4sVZxAs5nl785RNjc"
            }
        },
        "GetMessageBoardLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
                "Ref": "GetMessageBoardLambdaVersionSw8rQa7dPnbRCqEXyVL9jUdmrh1gVx6tZZtOYXeXvQ"
            }
        },
        "AddMessageBoardLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
                "Ref": "AddMessageBoardLambdaVersion0yh8K6Hz8cFYAL2eLf50Q3ATgMIAjex1DYpliQ"
            }
        },
        "UpdateMessageBoardLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
                "Ref": "UpdateMessageBoardLambdaVersionezphgQOVBtZjiobJ5ahtfbmuv3B8BT3TgJvikqEI"
            }
        },
        "GetGtNews1LambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
                "Ref": "GetGtNews1LambdaVersionS9SFSUX3DJJ2cgL1ShKbz3s5MJJBzlD7z2sLlRUCVrM"
            }
        },
        "GetGtNewsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
                "Ref": "GetGtNewsLambdaVersionjOQxHe5J8uPJtx4Uc85eZt0a2zfKgMXivs8x5F1ZQ"
            }
        },
        "AddGtNewsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
                "Ref": "AddGtNewsLambdaVersionAuWlHBHRr83aQTTXeLOOrLzrojEf7VuzW3fk6ji3mM"
            }
        },
        "UpdateGtNewsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
                "Ref": "UpdateGtNewsLambdaVersionnB7DKSHpsHemteEYInqs4MXhjlgrQkU7AdLobSNQ8"
            }
        },
        "AvailableRoutesLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
                "Ref": "AvailableRoutesLambdaVersionpXLE4Q8JnxCK9j4t3SwqCgm6hckqWAwfiknb7wqOjE"
            }
        },
        "AppropriateBusListLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
                "Ref": "AppropriateBusListLambdaVersionqmtZbGY5NdDJf4G8FxiqjDGXEY9keKQaer4XYsFzs"
            }
        },
        "GetSelectedBusLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
                "Ref": "GetSelectedBusLambdaVersiontvHidvn7aaJktVSLMEvuwKq7w534qxi4LEgpb8YwI"
            }
        },
        "GetAllBusesLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
                "Ref": "GetAllBusesLambdaVersionv5iDXAIYJd1bS6ZiItb232A4mXZqRygmo6r0Ghsk"
            }
        },
        "GetDriverRatingsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
                "Ref": "GetDriverRatingsLambdaVersionOVoqUgiCWAmjBlIl2BeRYklTYUkokpUARXa3XH2Os"
            }
        },
        "AvailableBusesLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
                "Ref": "AvailableBusesLambdaVersionqhd63EDmxJn6LEEl21tU1HzPEhf9V6WWma4QXTzcG4"
            }
        },
        "GetBusTrackingDetailsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
                "Ref": "GetBusTrackingDetailsLambdaVersionTLXMg39ktDiOiv8gRfLEbvLtgtt6o5kLvReJ2FO4"
            }
        },
        "BusTrackingDetailLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
                "Ref": "BusTrackingDetailLambdaVersionHVXd8DOC4cQmUEN58f0J5GJ007vfLFSOJPa64jippBs"
            }
        },
        "GetBusLocationTraceGeoTabLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
                "Ref": "GetBusLocationTraceGeoTabLambdaVersionr5HMGYzK9jvIKbPeuHyQFASN0RSZ9jFrgyAlJoKVg"
            }
        },
        "GetBusExceptionsGeoTabLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
                "Ref": "GetBusExceptionsGeoTabLambdaVersionJgBgIEyI9sW6ziq8l4U8fqIB9esRlINg8w8lZCIEUUA"
            }
        },
        "GetbusTrackingDetailGeoTabLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
                "Ref": "GetbusTrackingDetailGeoTabLambdaVersionC7ArsSFPmeVgPx2Ypqd0ec2jd2cerjtF1CSopByew"
            }
        },
        "PiLabTripDataProcessAllAPILambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
                "Ref": "PiLabTripDataProcessAllAPILambdaVersionLfagAx8PB9uJJ9tUx2TW35pkvac6lUhyIBPJz1oxQYY"
            }
        },
        "PiLabTripDataProcessAPILambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
                "Ref": "PiLabTripDataProcessAPILambdaVersionKpyUMHVXcxYPIcRK1iGsrDYGTzXIiTNsia7c4jUdeg"
            }
        },
        "PiLabTripDataProcessAllLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
                "Ref": "PiLabTripDataProcessAllLambdaVersionqdv42C90Gx9xih4MclwR8MrxH2jMgm1LeaA4VToaOE"
            }
        },
        "TestUnderscoreGeoTabTripDataLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
                "Ref": "TestUnderscoreGeoTabTripDataLambdaVersionsN2qkneUFv7DN9Gk62Y3AA3yCpXfZJiXhXXVJglnM"
            }
        },
        "TestUnderscoreSNSUnderscoreDynamoDbLambdaLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
                "Ref": "TestUnderscoreSNSUnderscoreDynamoDbLambdaLambdaVersionh3v848ON3dUZx23fDS6jFHxmWCR18elH7UIbP2YVw"
            }
        },
        "TestUnderscorePiLabTripDataProcessAllLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
                "Ref": "TestUnderscorePiLabTripDataProcessAllLambdaVersionbHwW4U6iLE2KhBzOrcaGh0x4j7hlP3Y0fDmF9qgjDkM"
            }
        },
        "TestUnderscorePiLabTripDataProcessLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
                "Ref": "TestUnderscorePiLabTripDataProcessLambdaVersionmJyp23fK1bn0vXYsGDHFrjLXQUydjskre4qnzMUCxgo"
            }
        },
        "TestUnderscorePiLabTripGeofencingExceptionLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
                "Ref": "TestUnderscorePiLabTripGeofencingExceptionLambdaVersionpmCW4OzIqsBrX2bEt9J1mHrYmBwnGMeTiKtxEwc"
            }
        },
        "TestUnderscorePiLabTripExceptionEventLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
                "Ref": "TestUnderscorePiLabTripExceptionEventLambdaVersionPDs2vflplC4kH2I6g2v6NpPfXOJsw645GPiOFx3bhYk"
            }
        },
        "SnsFirehoseLambdaTriggeredLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
                "Ref": "SnsFirehoseLambdaTriggeredLambdaVersionb1yveOD0lahQdTZC8OiysahcTXboLMjVjIScCPetoN0"
            }
        },
        "SnsDynamoDbLambdaTriggeredLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
                "Ref": "SnsDynamoDbLambdaTriggeredLambdaVersionf7Y2uzDZsvg4n0VJgaMdIgsDelEF5ePsODBSONqFvQ"
            }
        },
        "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        "https://",
                        {
                            "Ref": "ApiGatewayRestApi"
                        },
                        ".execute-api.",
                        {
                            "Ref": "AWS::Region"
                        },
                        ".",
                        {
                            "Ref": "AWS::URLSuffix"
                        },
                        "/dev"
                    ]
                ]
            }
        }
    }
}
